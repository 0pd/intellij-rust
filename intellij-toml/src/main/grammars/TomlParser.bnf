// https://github.com/toml-lang/toml/blob/master/toml.abnf
{
  // We employ hand-written Kotlin PSI
  generatePsi=false
  parserClass="org.toml.lang.parse.TomlParser"
  parserUtilClass="org.toml.lang.parse.TomlParserUtil"

  elementTypeHolderClass="org.toml.lang.psi.TomlElementTypes"
  elementTypeClass="org.toml.lang.psi.TomlCompositeType"
  tokenTypeClass="org.toml.lang.psi.TomlTokenType"

//    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
//
//    elementTypeClass="org.toml.lang.core.psi.TomlElementType"
//    tokenTypeClass="org.toml.lang.psi.TomlTokenType"

//    tokens=[
//      string='regexp:("[^"]*")'
//      number='regexp:(\d|_)+'
//      simple_number='regexp:(\d|_)+'
//      boolean='regexp:true|false'
//      simple_key='regexp:[0-9_\-a-zA-Z]+'
//      space='regexp:\s+'
//      date='date'
//      dot='.'
//      comma=','
//      eq='='
//      lbracket='['
//      rbracket=']'
//      lbrace='{'
//      rbrace='}'
//    ]
  tokens=[
    COMMENT="regexp:#.*"

    BOOLEAN

    BARE_KEY_OR_NUMBER="regexp:\d+"
    NUMBER
    BARE_KEY

    DATE

    BASIC_STRING
    LITERAL_STRING
    MULTILINE_BASIC_STRING
    MULTILINE_LITERAL_STRING

    EQ='='
  ]
}

File ::= FileForm*

private FileForm ::= KeyValue

KeyValue ::= Key '=' Value {pin=1}

private Value ::= Literal
Literal ::= Number | BOOLEAN | DATE
  | BASIC_STRING | LITERAL_STRING
  | MULTILINE_BASIC_STRING | MULTILINE_LITERAL_STRING

private Number ::= <<remap 'BARE_KEY_OR_NUMBER' 'NUMBER'>> | NUMBER

Key ::= BareKey | BASIC_STRING | LITERAL_STRING
private BareKey ::= <<remap 'BARE_KEY_OR_NUMBER' 'BARE_KEY'>> | BARE_KEY

//tomlFile ::= expression *
//
//expression ::= key_value | table | table_array
//
//table ::= table_header table_entries
//table_header ::= '[' path ']'
//
//table_array ::= table_array_header table_entries
//table_array_header ::= '[' '[' path ']' ']'
//
//key ::= simple_key | simple_number | string
//path ::= key ('.' key) *
//table_entries ::= key_value *
//
//key_value ::= key '=' value
//
////TODO inline_table should be on the single line
//inline_table ::= '{' (key_value (',' key_value)* ','?)? '}'
//
//value ::= string | simple_number | number | boolean | date | array | inline_table
//array ::= '[' (value (',' value)* ','?)? ']'
