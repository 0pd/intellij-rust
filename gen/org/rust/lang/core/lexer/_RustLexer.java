/* The following code was generated by JFlex 1.4.3 on 9/8/15 12:27 AM */

package org.rust.lang.core.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/8/15 12:27 AM from the specification file
 * <tt>/Users/akudinkin/Desktop/projects/rust/plugin/src/org/rust/lang/core/lexer/RustLexer.flex</tt>
 */
public class _RustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\45\1\35\1\44"+
    "\1\0\1\65\1\60\1\34\1\50\1\51\1\63\1\56\1\54\1\11"+
    "\1\7\1\64\1\17\1\25\1\14\1\13\1\16\1\33\1\15\1\33"+
    "\1\24\1\5\1\52\1\53\1\61\1\55\1\66\2\0\4\32\1\10"+
    "\1\32\14\6\1\102\7\6\1\46\1\36\1\47\1\62\1\3\1\0"+
    "\1\71\1\22\1\72\1\77\1\31\1\12\1\74\1\100\1\27\1\6"+
    "\1\76\1\73\1\75\1\37\1\21\1\70\1\6\1\40\1\26\1\41"+
    "\1\23\1\101\1\103\1\20\1\67\1\30\1\42\1\57\1\43\54\0"+
    "\1\4\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0"+
    "\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\201\0"+
    "\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\0\24\4\1\0\123\4\1\0\213\4\10\0\236\4\11\0"+
    "\46\4\2\0\1\4\7\0\47\4\110\0\33\4\5\0\3\4\55\0"+
    "\53\4\43\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0"+
    "\2\4\12\0\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0"+
    "\131\4\13\0\1\4\30\0\41\4\11\0\2\4\4\0\1\4\5\0"+
    "\26\4\4\0\1\4\11\0\1\4\3\0\1\4\27\0\31\4\107\0"+
    "\1\4\1\0\13\4\127\0\66\4\3\0\1\4\22\0\1\4\7\0"+
    "\12\4\17\0\7\4\1\0\7\4\5\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0"+
    "\1\4\15\0\2\4\1\0\3\4\16\0\2\4\23\0\6\4\4\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0"+
    "\2\4\37\0\4\4\1\0\1\4\23\0\3\4\20\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0"+
    "\1\4\22\0\1\4\17\0\2\4\43\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4\36\0"+
    "\2\4\1\0\3\4\17\0\1\4\21\0\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\14\4\26\0\1\4\64\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\32\0"+
    "\2\4\6\0\2\4\43\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0\2\4\17\0"+
    "\2\4\22\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\20\0"+
    "\1\4\21\0\2\4\30\0\6\4\5\0\22\4\3\0\30\4\1\0"+
    "\11\4\1\0\1\4\2\0\7\4\72\0\60\4\1\0\2\4\14\0"+
    "\7\4\72\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0"+
    "\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0"+
    "\5\4\1\0\1\4\25\0\4\4\40\0\1\4\77\0\10\4\1\0"+
    "\44\4\33\0\5\4\163\0\53\4\24\0\1\4\20\0\6\4\4\0"+
    "\4\4\3\0\1\4\3\0\2\4\7\0\3\4\4\0\15\4\14\0"+
    "\1\4\21\0\46\4\1\0\1\4\5\0\1\4\2\0\53\4\1\0"+
    "\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0"+
    "\103\4\45\0\20\4\20\0\125\4\14\0\u026c\4\2\0\21\4\1\0"+
    "\32\4\5\0\113\4\25\0\15\4\1\0\4\4\16\0\22\4\16\0"+
    "\22\4\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0"+
    "\1\4\103\0\130\4\10\0\51\4\1\0\1\4\5\0\106\4\12\0"+
    "\35\4\63\0\36\4\2\0\5\4\13\0\54\4\25\0\7\4\70\0"+
    "\27\4\11\0\65\4\122\0\1\4\135\0\57\4\21\0\7\4\67\0"+
    "\36\4\15\0\2\4\12\0\54\4\32\0\44\4\51\0\3\4\12\0"+
    "\44\4\153\0\4\4\1\0\4\4\3\0\2\4\11\0\300\4\100\0"+
    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\164\0\1\4\15\0"+
    "\1\4\20\0\15\4\145\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\64\0"+
    "\2\4\u0a7b\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\0"+
    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0"+
    "\1\4\20\0\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\120\0"+
    "\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0"+
    "\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0"+
    "\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4\103\0"+
    "\56\4\2\0\u010d\4\3\0\20\4\12\0\2\4\24\0\57\4\20\0"+
    "\31\4\10\0\106\4\61\0\11\4\2\0\147\4\2\0\4\4\1\0"+
    "\4\4\14\0\13\4\115\0\12\4\1\0\3\4\1\0\4\4\1\0"+
    "\27\4\35\0\64\4\16\0\62\4\76\0\6\4\3\0\1\4\16\0"+
    "\34\4\12\0\27\4\31\0\35\4\7\0\57\4\34\0\1\4\60\0"+
    "\51\4\27\0\3\4\1\0\10\4\24\0\27\4\3\0\1\4\5\0"+
    "\60\4\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0"+
    "\1\4\30\0\3\4\2\0\13\4\7\0\3\4\14\0\6\4\2\0"+
    "\6\4\2\0\6\4\11\0\7\4\1\0\7\4\221\0\43\4\35\0"+
    "\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0"+
    "\7\4\14\0\5\4\5\0\1\4\1\0\12\4\1\0\15\4\1\0"+
    "\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0"+
    "\u016b\4\22\0\100\4\2\0\66\4\50\0\14\4\164\0\5\4\1\0"+
    "\207\4\44\0\32\4\6\0\32\4\13\0\131\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\5\1\6\6\5\1\11\1\12\2\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\12\5\4\0\1\40\1\41"+
    "\1\42\1\43\2\5\1\44\1\5\3\6\13\5\1\45"+
    "\1\46\4\5\2\11\2\12\3\5\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\4\5\1\72\10\5\1\73\3\5\1\1\6\0\1\6"+
    "\2\0\1\74\4\5\1\75\2\5\1\76\12\5\1\77"+
    "\4\5\1\100\1\101\1\102\1\5\1\103\10\5\1\104"+
    "\1\105\1\5\1\106\6\5\3\0\1\107\1\0\12\5"+
    "\1\110\2\5\1\111\1\5\1\112\1\113\1\5\1\114"+
    "\1\5\1\115\1\5\1\116\1\117\1\120\5\5\1\121"+
    "\1\122\3\5\1\123\2\5\1\0\1\107\1\0\1\124"+
    "\1\125\3\5\1\126\2\5\1\127\5\5\1\130\1\5"+
    "\1\131\2\5\1\132\1\5\1\133\1\134\1\135\1\5"+
    "\1\136\1\137\2\5\1\140\1\5\1\141\1\142\1\143"+
    "\1\144\1\145\1\146\1\147\6\5\1\150\1\5\1\151"+
    "\1\5\1\152\1\153\1\154\1\155\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\314\0\314\0\u0594"+
    "\0\u05d8\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18"+
    "\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38"+
    "\0\314\0\314\0\314\0\314\0\u0c7c\0\u0cc0\0\u0154\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u0154\0\u0154"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\314\0\u1210\0\314\0\u1254"+
    "\0\u1298\0\u12dc\0\u1320\0\u1364\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u13a8\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u0154\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650"+
    "\0\u1694\0\u16d8\0\u171c\0\u0154\0\u1760\0\u17a4\0\u17e8\0\314"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\314\0\u19c4"+
    "\0\u1a08\0\u0154\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u0154\0\u1b5c"+
    "\0\u1ba0\0\u0154\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u0154\0\u1e8c\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u1364\0\314\0\314\0\u1f9c\0\u0154\0\u1fe0\0\u2024"+
    "\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u0154\0\u0154"+
    "\0\u2200\0\u0154\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u0154"+
    "\0\u27d8\0\u281c\0\u0154\0\u2860\0\u0154\0\u0154\0\u28a4\0\u0154"+
    "\0\u28e8\0\u292c\0\u2970\0\u0154\0\u0154\0\u0154\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u2ac4\0\u0154\0\u0154\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u0154\0\u2bd4\0\u2c18\0\u2c5c\0\314\0\u2ca0\0\u0154\0\u0154"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u0154\0\u2db0\0\u2df4\0\u0154\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u0154\0\u2f8c\0\u0154\0\u2fd0"+
    "\0\u3014\0\u0154\0\u3058\0\u0154\0\u0154\0\u0154\0\u309c\0\u0154"+
    "\0\u0154\0\u30e0\0\u3124\0\u0154\0\u3168\0\u0154\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u31ac\0\u31f0\0\u3234\0\u3278"+
    "\0\u32bc\0\u3300\0\u0154\0\u3344\0\u0154\0\u3388\0\u0154\0\u0154"+
    "\0\u0154\0\u0154\0\u0154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\7\1\6\1\10\1\6\1\11"+
    "\1\12\4\7\1\13\1\6\1\14\1\15\1\16\2\7"+
    "\1\17\1\20\1\6\1\21\1\6\1\7\1\22\1\23"+
    "\1\4\1\6\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\6\1\60"+
    "\1\6\1\61\1\6\1\62\1\63\1\64\63\2\1\65"+
    "\20\2\2\3\1\0\101\3\105\0\2\5\104\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\7\1\0\1\7\1\0\1\66"+
    "\1\67\2\0\5\7\3\0\1\70\2\7\1\0\1\70"+
    "\1\0\1\67\1\0\1\7\57\0\1\71\105\0\1\72"+
    "\43\0\1\73\10\0\1\74\20\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\7\6\1\75\5\6\1\76\4\6"+
    "\3\0\1\77\2\6\25\0\2\6\1\100\12\6\3\0"+
    "\1\7\1\0\1\7\1\0\1\66\1\67\2\0\5\7"+
    "\1\101\1\102\1\103\1\70\2\7\1\0\1\70\1\0"+
    "\1\67\1\0\1\7\53\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\1\104\21\6\3\0\3\6\25\0\12\6"+
    "\1\105\2\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\7\6\1\106\7\6\1\107\2\6\3\0\1\6"+
    "\1\110\1\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\14\6\1\111\5\6\3\0\1\112"+
    "\2\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\11\6\1\113\3\6\1\114\1\6\1\115"+
    "\2\6\3\0\2\6\1\116\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\1\117\21\6\3\0"+
    "\1\120\2\6\25\0\6\6\1\121\6\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\6\6\1\122\13\6"+
    "\3\0\1\123\2\6\25\0\4\6\1\124\10\6\34\22"+
    "\1\125\1\22\1\126\45\22\35\23\1\127\1\130\45\23"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\17\6"+
    "\1\131\2\6\3\0\3\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\1\6"+
    "\1\132\1\6\25\0\1\133\14\6\45\0\1\134\113\0"+
    "\1\135\103\0\1\136\103\0\1\137\1\140\102\0\1\141"+
    "\1\0\1\142\101\0\1\143\2\0\1\144\100\0\1\145"+
    "\3\0\1\146\77\0\1\147\103\0\1\150\103\0\1\151"+
    "\5\0\1\152\1\153\74\0\1\154\103\0\1\155\10\0"+
    "\1\156\20\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\15\6\1\157\4\6\3\0\3\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\11\6\1\160"+
    "\10\6\3\0\1\6\1\161\1\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\10\6\1\162"+
    "\3\6\1\163\5\6\3\0\3\6\25\0\4\6\1\164"+
    "\10\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\7\6\1\165\12\6\3\0\1\6\1\166\1\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\7\6\1\167\7\6\1\170\2\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\7\6\1\171\1\6\1\172\10\6\3\0\3\6\25\0"+
    "\2\6\1\173\12\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\7\6\1\174\12\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\15\6\1\175\4\6\3\0\3\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\17\6\1\176"+
    "\2\6\3\0\3\6\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\22\6\3\0\3\6\25\0"+
    "\11\6\1\177\3\6\63\2\1\65\1\200\17\2\5\0"+
    "\1\201\2\0\1\202\1\0\1\203\5\201\4\0\2\201"+
    "\3\0\1\202\1\0\1\201\61\0\1\204\44\0\1\204"+
    "\40\0\1\205\1\0\1\206\6\0\1\207\1\210\1\211"+
    "\60\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\1\6\1\212\1\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\1\213"+
    "\2\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\3\6\25\0\4\6\1\214"+
    "\10\6\3\0\1\101\1\0\1\101\2\0\1\101\2\0"+
    "\5\101\3\0\1\70\2\101\1\0\1\70\2\0\2\101"+
    "\53\0\1\102\7\0\5\102\3\0\1\70\1\0\1\102"+
    "\1\0\1\70\3\0\1\102\53\0\1\103\13\0\1\103"+
    "\3\0\1\70\1\0\1\103\1\0\1\70\57\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\1\215\21\6\3\0"+
    "\3\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\17\6\1\216\2\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\6\6\1\217\13\6\3\0\3\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\22\6\3\0"+
    "\3\6\25\0\3\6\1\220\11\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\17\6\1\221\2\6\3\0"+
    "\3\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\17\6\1\222\2\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\14\6\1\223\5\6\3\0\3\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\22\6\3\0"+
    "\3\6\25\0\1\6\1\224\13\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\16\6\1\225\3\6\3\0"+
    "\3\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\3\6\25\0\4\6\1\226"+
    "\10\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\1\6\1\227\1\6\25\0\2\6\1\230"+
    "\12\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\3\6\25\0\1\6\1\231\13\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\22\6\3\0"+
    "\2\6\1\232\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\11\6\1\233\10\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\14\6\1\234\5\6\3\0\3\6\25\0\15\6"+
    "\36\22\1\126\45\22\36\23\1\130\45\23\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\1\235\21\6\3\0"+
    "\2\6\1\236\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\11\6\1\237\10\6\3\0\3\6"+
    "\25\0\2\6\1\240\12\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\22\6\3\0\3\6\25\0\1\6"+
    "\1\241\13\6\2\242\1\0\101\242\55\0\1\243\103\0"+
    "\1\244\31\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\17\6\1\245\2\6\3\0\3\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\10\6\1\246"+
    "\11\6\3\0\1\6\1\247\1\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\7\6\1\250"+
    "\5\6\1\251\4\6\3\0\3\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\14\6\1\252"+
    "\5\6\3\0\3\6\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\15\6\1\253\4\6\3\0"+
    "\3\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\1\254\2\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\3\6\25\0\2\6\1\255\12\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\7\6\1\256\12\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\22\6\3\0\2\6\1\257\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\3\6\25\0\10\6\1\260\1\6\1\261"+
    "\2\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\2\6\1\262\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\2\6"+
    "\1\263\25\0\3\6\1\264\11\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\22\6\3\0\1\6\1\265"+
    "\1\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\3\6\25\0\4\6\1\266"+
    "\10\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\15\6\1\267\1\6\1\270\2\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\201\1\0\1\201\2\0\1\202\1\0"+
    "\1\203\5\201\4\0\2\201\3\0\1\202\1\0\1\201"+
    "\61\0\1\271\44\0\1\271\40\0\1\272\1\0\1\273"+
    "\73\0\1\274\5\0\5\274\4\0\2\274\5\0\1\274"+
    "\64\0\1\207\105\0\1\207\102\0\1\207\115\0\1\275"+
    "\57\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\3\6\25\0\2\6\1\276\12\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\14\6\1\277\5\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\14\6\1\300\5\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\22\6\3\0\1\6\1\301\1\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\7\6"+
    "\1\302\12\6\3\0\3\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\3\6"+
    "\25\0\2\6\1\303\12\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\15\6\1\304\4\6\3\0\3\6"+
    "\25\0\2\6\1\305\12\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\17\6\1\306\2\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\17\6\1\307\2\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\1\310"+
    "\21\6\3\0\3\6\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\11\6\1\311\10\6\3\0"+
    "\3\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\2\6\1\312\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\3\6\25\0\4\6\1\313\10\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\17\6\1\314\2\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\22\6\3\0\3\6\25\0\6\6"+
    "\1\315\6\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\17\6\1\316\2\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\11\6"+
    "\1\317\10\6\3\0\3\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\17\6\1\320\2\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\15\6\1\321\4\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\17\6\1\322\2\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\3\6\25\0\4\6\1\323\10\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\17\6\1\324\2\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\22\6\3\0\3\6\25\0\3\6"+
    "\1\325\11\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\22\6\3\0\3\6\25\0\12\6\1\326\2\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\2\6\1\327\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\22\6\3\0\3\6\25\0"+
    "\5\6\1\330\7\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\14\6\1\331\5\6\3\0\2\6\1\332"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\22\6\3\0\2\6\1\333\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\22\6\3\0"+
    "\3\6\25\0\1\6\1\334\13\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\17\6\1\335\2\6\3\0"+
    "\3\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\3\6\25\0\3\6\1\336"+
    "\11\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\1\6\1\337\1\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\22\6\3\0"+
    "\2\6\1\340\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\1\341\21\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\3\6\25\0\4\6\1\342\10\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\22\6\3\0"+
    "\1\6\1\343\1\6\25\0\15\6\5\0\1\344\5\0"+
    "\5\344\4\0\2\344\5\0\1\344\64\0\1\345\105\0"+
    "\1\345\70\0\1\274\1\0\1\274\4\0\1\203\5\274"+
    "\4\0\2\274\5\0\1\274\100\0\1\346\56\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\3\6"+
    "\25\0\4\6\1\347\10\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\17\6\1\350\2\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\17\6\1\351\2\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\1\6\1\352\1\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\3\6"+
    "\25\0\6\6\1\353\6\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\22\6\3\0\3\6\25\0\7\6"+
    "\1\354\5\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\16\6\1\355\3\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\1\356"+
    "\21\6\3\0\3\6\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\22\6\3\0\1\6\1\357"+
    "\1\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\7\6\1\360\12\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\3\6\25\0\3\6\1\361\11\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\15\6\1\362"+
    "\4\6\3\0\3\6\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\22\6\3\0\1\6\1\363"+
    "\1\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\1\6\1\364\1\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\2\6\1\365\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\7\6\1\366\12\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\22\6\3\0\3\6\25\0\10\6"+
    "\1\367\4\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\22\6\3\0\1\6\1\370\1\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\1\371\2\6\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\22\6\3\0\2\6\1\372"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\15\6\1\373\4\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\17\6"+
    "\1\374\2\6\3\0\3\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\3\6"+
    "\25\0\11\6\1\375\3\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\7\6\1\376\12\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\11\6\1\377\10\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\17\6"+
    "\1\u0100\2\6\3\0\3\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\17\6\1\u0101\2\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\344\1\0\1\344"+
    "\4\0\1\203\5\344\4\0\2\344\5\0\1\344\101\0"+
    "\1\207\55\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\2\6\1\u0102\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\15\6\1\u0103\4\6"+
    "\3\0\3\6\25\0\15\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\17\6\1\u0104\2\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\17\6\1\u0105\2\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\17\6"+
    "\1\u0106\2\6\3\0\3\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\1\u0107\21\6\3\0"+
    "\3\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\2\6\1\u0108\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\3\6\25\0\3\6\1\u0109\11\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\1\u010a"+
    "\2\6\25\0\15\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\22\6\3\0\1\u010b\2\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\1\u010c"+
    "\21\6\3\0\3\6\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\22\6\3\0\3\6\25\0"+
    "\2\6\1\u010d\12\6\3\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\0\7\6\1\u010e\12\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\22\6\3\0\1\u010f\2\6\25\0\15\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\3\6"+
    "\25\0\2\6\1\u0110\12\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\7\6\1\u0111\12\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\22\6\3\0\3\6\25\0\10\6\1\u0112\4\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\3\6\25\0\10\6\1\u0113\4\6\3\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\0\22\6\3\0\3\6"+
    "\25\0\3\6\1\u0114\11\6\3\0\1\6\1\0\2\6"+
    "\1\0\1\6\1\0\1\u0115\21\6\3\0\3\6\25\0"+
    "\15\6\3\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\11\6\1\u0116\10\6\3\0\3\6\25\0\15\6\3\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\0\22\6\3\0"+
    "\3\6\25\0\4\6\1\u0117\10\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\1\u0118\21\6\3\0\3\6"+
    "\25\0\15\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\0\17\6\1\u0119\2\6\3\0\3\6\25\0\15\6"+
    "\3\0\1\6\1\0\2\6\1\0\1\6\1\0\22\6"+
    "\3\0\2\6\1\u011a\25\0\15\6\3\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\17\6\1\u011b\2\6\3\0"+
    "\3\6\25\0\15\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\21\1\2\11\2\1\7\11\24\1"+
    "\4\0\4\11\30\1\1\11\1\1\1\11\5\1\11\11"+
    "\1\1\7\11\22\1\1\11\6\0\1\11\2\0\31\1"+
    "\2\11\24\1\3\0\1\1\1\0\46\1\1\0\1\11"+
    "\1\0\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _RustLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1632) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 98: 
          { return RustTokenElementTypes.SIZEOF;
          }
        case 111: break;
        case 1: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '*')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.BLOCK_COMMENT;
          }
        case 112: break;
        case 90: 
          { return RustTokenElementTypes.CONST;
          }
        case 113: break;
        case 82: 
          { return RustTokenElementTypes.MOVE;
          }
        case 114: break;
        case 107: 
          { return RustTokenElementTypes.OFFSETOF;
          }
        case 115: break;
        case 19: 
          { return RustTokenElementTypes.COLON;
          }
        case 116: break;
        case 68: 
          { return RustTokenElementTypes.LET;
          }
        case 117: break;
        case 97: 
          { return RustTokenElementTypes.UNSAFE;
          }
        case 118: break;
        case 6: 
          { return RustTokenElementTypes.INTEGER_LITERAL;
          }
        case 119: break;
        case 86: 
          { return RustTokenElementTypes.BREAK;
          }
        case 120: break;
        case 31: 
          { return RustTokenElementTypes.GT;
          }
        case 121: break;
        case 36: 
          { return RustTokenElementTypes.FN;
          }
        case 122: break;
        case 88: 
          { return RustTokenElementTypes.TRAIT;
          }
        case 123: break;
        case 79: 
          { return RustTokenElementTypes.PROC;
          }
        case 124: break;
        case 25: 
          { return RustTokenElementTypes.AND;
          }
        case 125: break;
        case 12: 
          { return RustTokenElementTypes.RBRACE;
          }
        case 126: break;
        case 11: 
          { return RustTokenElementTypes.LBRACE;
          }
        case 127: break;
        case 16: 
          { return RustTokenElementTypes.RBRACK;
          }
        case 128: break;
        case 15: 
          { return RustTokenElementTypes.LBRACK;
          }
        case 129: break;
        case 23: 
          { return RustTokenElementTypes.PLUS;
          }
        case 130: break;
        case 24: 
          { return RustTokenElementTypes.OR;
          }
        case 131: break;
        case 55: 
          { return RustTokenElementTypes.REMEQ;
          }
        case 132: break;
        case 77: 
          { return RustTokenElementTypes.TYPE;
          }
        case 133: break;
        case 89: 
          { return RustTokenElementTypes.YIELD;
          }
        case 134: break;
        case 41: 
          { return RustTokenElementTypes.EQEQ;
          }
        case 135: break;
        case 80: 
          { return RustTokenElementTypes.PRIV;
          }
        case 136: break;
        case 87: 
          { return RustTokenElementTypes.SUPER;
          }
        case 137: break;
        case 33: 
          { return RustTokenElementTypes.MINUSMINUS;
          }
        case 138: break;
        case 96: 
          { return RustTokenElementTypes.BECOME;
          }
        case 139: break;
        case 49: 
          { return RustTokenElementTypes.LTLT;
          }
        case 140: break;
        case 13: 
          { return RustTokenElementTypes.SHA;
          }
        case 141: break;
        case 14: 
          { return RustTokenElementTypes.EXCL;
          }
        case 142: break;
        case 74: 
          { return RustTokenElementTypes.ENUM;
          }
        case 143: break;
        case 108: 
          { return RustTokenElementTypes.OVERRIDE;
          }
        case 144: break;
        case 21: 
          { return RustTokenElementTypes.COMMA;
          }
        case 145: break;
        case 103: 
          { return RustTokenElementTypes.TYPEOF;
          }
        case 146: break;
        case 4: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 147: break;
        case 37: 
          { return RustTokenElementTypes.IF;
          }
        case 148: break;
        case 62: 
          { return RustTokenElementTypes.USE;
          }
        case 149: break;
        case 18: 
          { return RustTokenElementTypes.RPAREN;
          }
        case 150: break;
        case 44: 
          { return RustTokenElementTypes.OREQ;
          }
        case 151: break;
        case 51: 
          { return RustTokenElementTypes.MULEQ;
          }
        case 152: break;
        case 57: 
          { return RustTokenElementTypes.GTGT;
          }
        case 153: break;
        case 50: 
          { return RustTokenElementTypes.XOREQ;
          }
        case 154: break;
        case 30: 
          { return RustTokenElementTypes.REM;
          }
        case 155: break;
        case 69: 
          { return RustTokenElementTypes.MOD;
          }
        case 156: break;
        case 110: 
          { return RustTokenElementTypes.CONTINUE;
          }
        case 157: break;
        case 66: 
          { return RustTokenElementTypes.GTGTEQ;
          }
        case 158: break;
        case 27: 
          { return RustTokenElementTypes.XOR;
          }
        case 159: break;
        case 2: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '/')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.EOL_COMMENT;
          }
        case 160: break;
        case 29: 
          { return RustTokenElementTypes.DIV;
          }
        case 161: break;
        case 58: 
          { return RustTokenElementTypes.AS;
          }
        case 162: break;
        case 32: 
          { return RustTokenElementTypes.DOTDOT;
          }
        case 163: break;
        case 17: 
          { return RustTokenElementTypes.LPAREN;
          }
        case 164: break;
        case 52: 
          { return RustTokenElementTypes.DIVEQ;
          }
        case 165: break;
        case 34: 
          { return RustTokenElementTypes.MINUSEQ;
          }
        case 166: break;
        case 47: 
          { return RustTokenElementTypes.ANDAND;
          }
        case 167: break;
        case 84: 
          { return RustTokenElementTypes.FINAL;
          }
        case 168: break;
        case 63: 
          { return RustTokenElementTypes.REF;
          }
        case 169: break;
        case 106: 
          { return RustTokenElementTypes.VIRTUAL;
          }
        case 170: break;
        case 85: 
          { return RustTokenElementTypes.FALSE;
          }
        case 171: break;
        case 100: 
          { return RustTokenElementTypes.STATIC;
          }
        case 172: break;
        case 91: 
          { return RustTokenElementTypes.CRATE;
          }
        case 173: break;
        case 83: 
          { return RustTokenElementTypes.CSELF;
          }
        case 174: break;
        case 53: 
          { yybegin(BLOCK_COMMENT); yypushback(2);
          }
        case 175: break;
        case 39: 
          { return RustTokenElementTypes.SHEBANG;
          }
        case 176: break;
        case 7: 
          { return RustTokenElementTypes.DOT;
          }
        case 177: break;
        case 65: 
          { return RustTokenElementTypes.LTLTEQ;
          }
        case 178: break;
        case 46: 
          { return RustTokenElementTypes.ANDEQ;
          }
        case 179: break;
        case 75: 
          { return RustTokenElementTypes.ELSE;
          }
        case 180: break;
        case 105: 
          { return RustTokenElementTypes.ALIGNOF;
          }
        case 181: break;
        case 20: 
          { return RustTokenElementTypes.SEMICOLON;
          }
        case 182: break;
        case 67: 
          { return RustTokenElementTypes.PUB;
          }
        case 183: break;
        case 70: 
          { return RustTokenElementTypes.MUT;
          }
        case 184: break;
        case 109: 
          { return RustTokenElementTypes.ABSTRACT;
          }
        case 185: break;
        case 64: 
          { return RustTokenElementTypes.SHEBANG_LINE;
          }
        case 186: break;
        case 101: 
          { return RustTokenElementTypes.EXTERN;
          }
        case 187: break;
        case 22: 
          { return RustTokenElementTypes.EQ;
          }
        case 188: break;
        case 81: 
          { return RustTokenElementTypes.LOOP;
          }
        case 189: break;
        case 10: 
          { return RustTokenElementTypes.STRING_LITERAL;
          }
        case 190: break;
        case 95: 
          { return RustTokenElementTypes.WHERE;
          }
        case 191: break;
        case 104: 
          { return RustTokenElementTypes.UNSIZED;
          }
        case 192: break;
        case 9: 
          { return RustTokenElementTypes.CHAR_LITERAL;
          }
        case 193: break;
        case 78: 
          { return RustTokenElementTypes.PURE;
          }
        case 194: break;
        case 99: 
          { return RustTokenElementTypes.STRUCT;
          }
        case 195: break;
        case 102: 
          { return RustTokenElementTypes.RETURN;
          }
        case 196: break;
        case 93: 
          { return RustTokenElementTypes.MACRO;
          }
        case 197: break;
        case 71: 
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 198: break;
        case 73: 
          { return RustTokenElementTypes.IMPL;
          }
        case 199: break;
        case 72: 
          { return RustTokenElementTypes.SELF;
          }
        case 200: break;
        case 5: 
          { return RustTokenElementTypes.IDENTIFIER;
          }
        case 201: break;
        case 8: 
          { return RustTokenElementTypes.MINUS;
          }
        case 202: break;
        case 42: 
          { return RustTokenElementTypes.PLUSEQ;
          }
        case 203: break;
        case 76: 
          { return RustTokenElementTypes.TRUE;
          }
        case 204: break;
        case 92: 
          { return RustTokenElementTypes.MATCH;
          }
        case 205: break;
        case 61: 
          { return RustTokenElementTypes.BOX;
          }
        case 206: break;
        case 45: 
          { return RustTokenElementTypes.OROR;
          }
        case 207: break;
        case 3: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 208: break;
        case 35: 
          { return RustTokenElementTypes.ARROW;
          }
        case 209: break;
        case 56: 
          { return RustTokenElementTypes.GTEQ;
          }
        case 210: break;
        case 28: 
          { return RustTokenElementTypes.MUL;
          }
        case 211: break;
        case 60: 
          { return RustTokenElementTypes.FOR;
          }
        case 212: break;
        case 26: 
          { return RustTokenElementTypes.LT;
          }
        case 213: break;
        case 40: 
          { return RustTokenElementTypes.EXCLEQ;
          }
        case 214: break;
        case 48: 
          { return RustTokenElementTypes.LTEQ;
          }
        case 215: break;
        case 43: 
          { return RustTokenElementTypes.PLUSPLUS;
          }
        case 216: break;
        case 54: 
          { yybegin(EOL_COMMENT);   yypushback(2);
          }
        case 217: break;
        case 59: 
          { return RustTokenElementTypes.DO;
          }
        case 218: break;
        case 38: 
          { return RustTokenElementTypes.IN;
          }
        case 219: break;
        case 94: 
          { return RustTokenElementTypes.WHILE;
          }
        case 220: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
