/* The following code was generated by JFlex 1.6.0 */

package org.rust.lang.core.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/org/rust/lang/core/lexer/RustLexer.flex</tt>
 */
public class _RustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int EOL_COMMENT = 4;
  public static final int LIFETIME_OR_CHAR = 6;
  public static final int RAW_LITERAL = 8;
  public static final int SUFFIX = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\1\1\50\1\50\1\1\22\0\1\2\1\46\1\36"+
    "\1\45\1\74\1\70\1\63\1\34\1\53\1\54\1\66\1\61\1\57"+
    "\1\7\1\5\1\67\1\16\1\24\1\12\1\11\1\14\1\33\1\13"+
    "\1\33\1\23\1\31\1\55\1\56\1\64\1\60\1\71\1\72\1\73"+
    "\4\32\1\6\1\32\14\3\1\107\7\3\1\47\1\37\1\52\1\65"+
    "\1\15\1\0\1\75\1\21\1\76\1\103\1\30\1\10\1\100\1\105"+
    "\1\26\1\3\1\102\1\77\1\101\1\41\1\20\1\104\1\3\1\35"+
    "\1\25\1\42\1\22\1\106\1\111\1\17\1\110\1\27\1\43\1\62"+
    "\1\44\2\0\5\112\1\51\44\112\1\113\12\112\1\113\1\112\1\114"+
    "\2\112\1\113\5\112\27\113\1\112\37\113\1\112\10\113\u01c2\3\4\0"+
    "\14\3\16\0\5\3\7\0\1\3\1\0\1\3\21\0\160\4\5\3"+
    "\1\0\2\3\3\0\3\3\1\0\1\3\6\0\1\3\1\4\3\3"+
    "\1\0\1\3\1\0\24\3\1\0\123\3\1\0\213\3\1\0\5\4"+
    "\2\0\246\3\1\0\46\3\2\0\1\3\7\0\47\3\11\0\55\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4\10\0\33\3"+
    "\5\0\3\3\35\0\13\4\5\0\53\3\37\4\4\0\2\3\1\4"+
    "\143\3\1\0\1\3\7\4\2\0\6\4\2\3\2\4\1\0\4\4"+
    "\2\3\12\4\3\3\2\0\1\3\20\0\1\3\1\4\36\3\33\4"+
    "\2\0\131\3\13\4\1\3\16\0\12\4\41\3\11\4\2\3\4\0"+
    "\1\3\5\0\26\3\4\4\1\3\11\4\1\3\3\4\1\3\5\4"+
    "\22\0\31\3\3\4\104\0\23\3\61\0\40\4\66\3\3\4\1\3"+
    "\22\4\1\3\7\4\12\3\2\4\2\0\12\4\1\0\20\3\3\4"+
    "\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\1\3"+
    "\3\0\4\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0\3\4"+
    "\1\3\10\0\1\4\4\0\2\3\1\0\3\3\2\4\2\0\12\4"+
    "\2\3\17\0\3\4\1\0\6\3\4\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0"+
    "\5\4\4\0\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0"+
    "\1\3\7\0\14\4\3\3\1\4\13\0\3\4\1\0\11\3\1\0"+
    "\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0"+
    "\1\4\1\3\10\4\1\0\3\4\1\0\3\4\2\0\1\3\17\0"+
    "\2\3\2\4\2\0\12\4\21\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3"+
    "\1\0\3\3\2\4\2\0\12\4\1\0\1\3\20\0\1\4\1\3"+
    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3"+
    "\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\4"+
    "\3\0\3\4\1\0\4\4\2\0\1\3\6\0\1\4\16\0\12\4"+
    "\20\0\4\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\20\3"+
    "\3\0\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\1\0"+
    "\2\3\6\0\2\3\2\4\2\0\12\4\21\0\3\4\1\0\10\3"+
    "\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\3"+
    "\1\0\2\3\2\4\2\0\12\4\1\0\2\3\16\0\3\4\1\0"+
    "\10\3\1\0\3\3\1\0\51\3\2\0\1\3\7\4\1\0\3\4"+
    "\1\0\4\4\1\3\10\0\1\4\10\0\2\3\2\4\2\0\12\4"+
    "\12\0\6\3\2\0\2\4\1\0\22\3\3\0\30\3\1\0\11\3"+
    "\1\0\1\3\2\0\7\3\3\0\1\4\4\0\6\4\1\0\1\4"+
    "\1\0\10\4\6\0\12\4\2\0\2\4\15\0\60\3\1\4\1\3"+
    "\10\4\5\0\7\3\10\4\1\0\12\4\47\0\2\3\1\0\1\3"+
    "\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3"+
    "\1\4\1\3\7\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3"+
    "\1\0\6\4\2\0\12\4\2\0\4\3\40\0\1\3\27\0\2\4"+
    "\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\10\3\1\0\44\3\4\0\24\4\1\0\2\4\5\3\13\4\1\0"+
    "\44\4\11\0\1\4\71\0\53\3\24\4\1\3\12\4\6\0\6\3"+
    "\4\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3\4\4\15\3"+
    "\14\4\1\3\17\4\2\0\46\3\1\0\1\3\5\0\1\3\2\0"+
    "\53\3\1\0\u014d\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0"+
    "\4\3\2\0\103\3\2\0\3\4\11\0\11\4\16\0\20\3\20\0"+
    "\125\3\14\0\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\3\0"+
    "\13\3\7\0\15\3\1\0\4\3\3\4\13\0\22\3\3\4\13\0"+
    "\22\3\2\4\14\0\15\3\1\0\3\3\1\0\2\4\14\0\64\3"+
    "\40\4\3\0\1\3\4\0\1\3\1\4\2\0\12\4\41\0\3\4"+
    "\2\0\12\4\6\0\130\3\10\0\51\3\1\4\1\3\5\0\106\3"+
    "\12\0\37\3\1\0\14\4\4\0\14\4\12\0\12\4\36\3\2\0"+
    "\5\3\13\0\54\3\4\0\21\4\7\3\2\4\6\0\13\4\45\0"+
    "\27\3\5\4\4\0\65\3\12\4\1\0\35\4\2\0\13\4\6\0"+
    "\12\4\15\0\1\3\10\0\16\4\102\0\5\4\57\3\21\4\7\3"+
    "\4\0\12\4\21\0\11\4\14\0\3\4\36\3\15\4\2\3\12\4"+
    "\54\3\16\4\14\0\44\3\24\4\10\0\12\4\3\0\3\3\12\4"+
    "\44\3\122\0\3\4\1\0\25\4\4\3\1\4\4\3\3\4\2\3"+
    "\1\0\2\4\6\0\300\3\66\4\6\0\4\4\u0116\3\2\0\6\3"+
    "\2\0\46\3\2\0\6\3\2\0\10\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\37\3\2\0\65\3\1\0\7\3\1\0\1\3"+
    "\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\15\3"+
    "\5\0\3\3\1\0\7\3\53\0\1\50\1\50\25\0\2\4\23\0"+
    "\1\4\34\0\1\3\15\0\1\3\20\0\15\3\63\0\15\4\4\0"+
    "\1\4\3\0\14\4\21\0\1\3\4\0\1\3\2\0\12\3\1\0"+
    "\1\3\2\0\6\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\20\3\2\0\4\3\5\0\5\3\4\0\1\3\21\0\51\3\u0a77\0"+
    "\57\3\1\0\57\3\1\0\205\3\6\0\4\3\3\4\2\3\14\0"+
    "\46\3\1\0\1\3\5\0\1\3\2\0\70\3\7\0\1\3\17\0"+
    "\1\4\27\3\11\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\40\4"+
    "\u0205\0\3\3\31\0\11\3\6\4\1\0\5\3\2\0\5\3\4\0"+
    "\126\3\2\0\2\4\2\0\3\3\1\0\132\3\1\0\4\3\5\0"+
    "\51\3\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0"+
    "\u51cd\3\63\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0\20\3\12\4"+
    "\2\3\24\0\57\3\1\4\4\0\12\4\1\0\37\3\1\0\1\4"+
    "\120\3\2\4\45\0\11\3\2\0\147\3\2\0\4\3\1\0\36\3"+
    "\2\0\2\3\105\0\13\3\1\4\3\3\1\4\4\3\1\4\27\3"+
    "\5\4\30\0\64\3\14\0\2\4\62\3\21\4\13\0\12\4\6\0"+
    "\22\4\6\3\3\0\1\3\4\0\12\4\34\3\10\4\2\0\27\3"+
    "\15\4\14\0\35\3\3\0\4\4\57\3\16\4\16\0\1\3\12\4"+
    "\6\0\5\3\1\4\12\3\12\4\5\3\1\0\51\3\16\4\11\0"+
    "\3\3\1\4\10\3\2\4\2\0\12\4\6\0\27\3\3\0\1\3"+
    "\3\4\62\3\1\4\1\3\3\4\2\3\2\4\5\3\2\4\1\3"+
    "\1\4\1\3\30\0\3\3\2\0\13\3\5\4\2\0\3\3\2\4"+
    "\12\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3"+
    "\1\0\53\3\1\0\4\3\4\0\2\3\132\0\43\3\10\4\1\0"+
    "\2\4\2\0\12\4\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0"+
    "\u016e\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0\1\3\1\4"+
    "\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\154\3\41\0\213\3\6\0\332\3\22\0\100\3\2\0"+
    "\66\3\50\0\12\3\6\0\20\4\20\0\16\4\5\0\2\4\30\0"+
    "\3\4\41\0\1\3\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\176\3\23\0\12\4\7\0\32\3\4\0"+
    "\1\4\1\0\32\3\13\0\70\3\2\4\37\3\3\0\6\3\2\0"+
    "\6\3\2\0\6\3\2\0\3\3\43\0\14\3\1\0\32\3\1\0"+
    "\23\3\1\0\2\3\1\0\17\3\2\0\16\3\42\0\173\3\105\0"+
    "\65\3\210\0\1\4\202\0\35\3\3\0\61\3\17\0\1\4\37\0"+
    "\40\3\20\0\33\3\5\0\46\3\5\4\5\0\36\3\2\0\44\3"+
    "\4\0\10\3\1\0\5\3\52\0\236\3\2\0\12\4\126\0\50\3"+
    "\10\0\64\3\234\0\u0137\3\11\0\26\3\12\0\10\3\230\0\6\3"+
    "\2\0\1\3\1\0\54\3\1\0\2\3\3\0\1\3\2\0\27\3"+
    "\12\0\27\3\11\0\37\3\141\0\26\3\12\0\32\3\106\0\70\3"+
    "\6\0\2\3\100\0\1\3\3\4\1\0\2\4\5\0\4\4\4\3"+
    "\1\0\3\3\1\0\33\3\4\0\3\4\4\0\1\4\40\0\35\3"+
    "\3\0\35\3\43\0\10\3\1\0\34\3\2\4\31\0\66\3\12\0"+
    "\26\3\12\0\23\3\15\0\22\3\156\0\111\3\u03b7\0\3\4\65\3"+
    "\17\4\37\0\12\4\17\0\4\4\55\3\13\4\25\0\31\3\7\0"+
    "\12\4\6\0\3\4\44\3\16\4\1\0\12\4\20\0\43\3\1\4"+
    "\2\0\1\3\11\0\3\4\60\3\16\4\4\3\13\0\12\4\1\3"+
    "\45\0\22\3\1\0\31\3\14\4\170\0\57\3\14\4\5\0\12\4"+
    "\7\0\3\4\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3"+
    "\1\0\2\3\1\0\5\3\2\0\1\4\1\3\7\4\2\0\2\4"+
    "\2\0\3\4\11\0\1\4\5\0\5\3\2\4\2\0\7\4\3\0"+
    "\5\4\u010b\0\60\3\24\4\2\3\1\0\1\3\10\0\12\4\246\0"+
    "\57\3\7\4\2\0\11\4\77\0\60\3\21\4\3\0\1\3\13\0"+
    "\12\4\46\0\53\3\15\4\10\0\12\4\u01d6\0\100\3\12\4\25\0"+
    "\1\3\u01c0\0\71\3\u0507\0\u0399\3\147\0\157\3\u0b91\0\u042f\3\u33d1\0"+
    "\u0239\3\7\0\37\3\1\0\12\4\146\0\36\3\2\0\5\4\13\0"+
    "\60\3\7\4\11\0\4\3\14\0\12\4\11\0\25\3\5\0\23\3"+
    "\u0370\0\105\3\13\0\1\3\56\4\20\0\4\4\15\3\u4060\0\2\3"+
    "\u0bfe\0\153\3\5\0\15\3\3\0\11\3\7\0\12\3\3\0\2\4"+
    "\u14c6\0\5\4\3\0\6\4\10\0\10\4\2\0\7\4\36\0\4\4"+
    "\224\0\3\4\u01bb\0\125\3\1\0\107\3\1\0\2\3\2\0\1\3"+
    "\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3"+
    "\1\0\101\3\1\0\4\3\2\0\10\3\1\0\7\3\1\0\34\3"+
    "\1\0\4\3\1\0\5\3\1\0\1\3\3\0\7\3\1\0\u0154\3"+
    "\2\0\31\3\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3"+
    "\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3\1\0\31\3"+
    "\1\0\10\3\2\0\62\4\u1000\0\305\3\13\0\7\4\u0529\0\4\3"+
    "\1\0\33\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3"+
    "\1\0\4\3\1\0\1\3\1\0\12\3\1\0\21\3\5\0\3\3"+
    "\1\0\5\3\1\0\21\3\u1144\0\ua6d7\3\51\0\u1035\3\13\0\336\3"+
    "\u3fe2\0\u021e\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\4\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\4\1\7\1\10\1\7\6\4\1\11\1\4\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\12\4\3\43\1\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\4\1\52\1\4\4\0\3\7"+
    "\4\4\1\0\1\4\1\53\6\4\1\54\1\55\6\4"+
    "\1\0\2\12\2\4\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\4\1\101"+
    "\10\4\1\102\6\4\1\103\1\104\1\0\2\105\3\0"+
    "\1\105\1\106\1\107\1\110\2\4\1\111\1\112\1\0"+
    "\1\112\4\0\1\7\2\0\2\4\1\113\1\4\2\0"+
    "\2\4\1\0\2\53\1\114\12\4\1\115\1\4\1\116"+
    "\1\117\3\4\1\120\1\121\5\4\1\122\1\123\1\4"+
    "\1\124\2\4\1\125\10\4\1\126\2\105\2\0\1\126"+
    "\1\0\1\105\2\4\1\112\1\0\3\4\1\127\2\0"+
    "\1\127\1\4\1\130\1\131\4\4\1\132\2\4\1\133"+
    "\1\4\1\134\1\135\1\4\2\116\1\136\1\4\1\137"+
    "\5\4\1\140\1\141\2\4\1\142\1\143\1\144\1\4"+
    "\1\145\3\4\1\105\3\0\1\105\1\146\1\147\1\0"+
    "\3\4\2\0\1\150\2\130\2\4\1\151\5\4\1\152"+
    "\3\4\1\153\1\4\1\154\1\155\1\156\1\4\1\157"+
    "\1\160\1\161\1\105\1\0\2\4\1\162\1\0\1\4"+
    "\1\163\1\164\1\165\1\166\1\167\1\170\1\171\4\4"+
    "\1\105\1\0\2\4\1\0\1\172\1\4\1\173\1\4"+
    "\1\174\1\175\1\0\1\176\1\177\1\0\1\200\1\201"+
    "\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u0268\0\u03e9\0\u0436"+
    "\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u01ce\0\u0604\0\u0651"+
    "\0\u069e\0\u01ce\0\u01ce\0\u06eb\0\u0738\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u01ce\0\u0785\0\u01ce\0\u01ce\0\u07d2\0\u081f\0\u086c\0\u08b9"+
    "\0\u0906\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u01ce\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55"+
    "\0\u0ca2\0\u0cef\0\u0d3c\0\u01ce\0\u0d89\0\u0dd6\0\u0e23\0\u0e70"+
    "\0\u01ce\0\u0ebd\0\u0f0a\0\u01ce\0\u01ce\0\u01ce\0\u0f57\0\u0fa4"+
    "\0\u0268\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf"+
    "\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427"+
    "\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u0268\0\u0268"+
    "\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810\0\u01ce"+
    "\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u01ce\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u1991"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u19de\0\u0268"+
    "\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46"+
    "\0\u0268\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u01ce"+
    "\0\u01ce\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f"+
    "\0\u0e70\0\u01ce\0\u0268\0\u207c\0\u20c9\0\u01ce\0\u2116\0\u2163"+
    "\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u01ce\0\u2331\0\u237e"+
    "\0\u23cb\0\u2418\0\u0268\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599"+
    "\0\u25e6\0\u01ce\0\u2633\0\u0268\0\u2680\0\u26cd\0\u271a\0\u2767"+
    "\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u0268\0\u2982"+
    "\0\u29cf\0\u01ce\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u01ce\0\u2b50"+
    "\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u0268\0\u0268\0\u2cd1\0\u0268"+
    "\0\u2d1e\0\u2d6b\0\u0268\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u2eec"+
    "\0\u2f39\0\u2f86\0\u2fd3\0\u01ce\0\u3020\0\u306d\0\u30ba\0\u3107"+
    "\0\u1e61\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u01ce\0\u3288\0\u32d5"+
    "\0\u3322\0\u336f\0\u01ce\0\u33bc\0\u3409\0\u24b2\0\u3456\0\u34a3"+
    "\0\u01ce\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u0268\0\u3624\0\u3671"+
    "\0\u0268\0\u36be\0\u0268\0\u0268\0\u370b\0\u01ce\0\u3758\0\u0268"+
    "\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u3926\0\u3973\0\u0268"+
    "\0\u0268\0\u39c0\0\u3a0d\0\u0268\0\u0268\0\u0268\0\u3a5a\0\u0268"+
    "\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2"+
    "\0\u0268\0\u0268\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90"+
    "\0\u0268\0\u01ce\0\u3edd\0\u3f2a\0\u3f77\0\u0268\0\u3fc4\0\u4011"+
    "\0\u405e\0\u40ab\0\u40f8\0\u0268\0\u4145\0\u4192\0\u41df\0\u0268"+
    "\0\u422c\0\u0268\0\u0268\0\u0268\0\u4279\0\u0268\0\u0268\0\u0268"+
    "\0\u42c6\0\u4313\0\u4360\0\u43ad\0\u0268\0\u43fa\0\u4447\0\u0268"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u4494\0\u44e1"+
    "\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662\0\u46af\0\u46fc\0\u0268"+
    "\0\u4749\0\u0268\0\u4796\0\u0268\0\u3020\0\u47e3\0\u0268\0\u0268"+
    "\0\u4830\0\u0268\0\u0268\0\u487d\0\u48ca\0\u4917\0\u4964\0\u49b1"+
    "\0\u49fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\7\1\12\1\11\1\13\1\14"+
    "\4\15\1\16\1\17\1\11\1\20\1\21\1\22\2\15"+
    "\1\23\1\24\1\11\1\25\1\15\1\11\1\15\1\26"+
    "\1\27\1\30\1\7\1\10\1\11\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\7\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\11\1\65\1\11\1\66\1\67\1\11"+
    "\1\70\1\71\1\72\1\73\1\7\1\11\1\7\66\74"+
    "\1\75\1\76\25\74\1\3\1\0\46\3\2\0\43\3"+
    "\34\0\1\77\60\0\36\74\1\100\56\74\3\101\1\102"+
    "\2\101\1\102\1\101\1\102\4\101\1\102\1\101\4\102"+
    "\2\101\4\102\1\101\1\102\2\101\1\102\3\101\2\102"+
    "\32\101\15\102\1\101\1\102\1\101\116\0\2\10\35\0"+
    "\1\10\57\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\3\0\2\11\32\0\15\11\1\0\2\11\5\0"+
    "\1\103\116\0\1\104\50\0\1\105\10\0\1\106\26\0"+
    "\2\11\1\0\1\11\1\0\10\11\1\107\5\11\1\110"+
    "\5\11\1\0\1\11\3\0\1\111\1\11\32\0\1\112"+
    "\14\11\1\0\2\11\5\0\1\113\1\114\1\0\1\115"+
    "\6\15\3\0\1\116\2\15\1\0\1\116\1\0\1\114"+
    "\1\15\1\0\1\15\66\0\1\113\1\114\1\0\1\115"+
    "\6\15\1\117\1\120\1\121\1\116\2\15\1\0\1\116"+
    "\1\0\1\114\1\15\1\0\1\15\64\0\2\11\1\0"+
    "\1\11\1\0\1\122\23\11\1\0\1\11\3\0\2\11"+
    "\32\0\11\11\1\123\3\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\10\11\1\124\7\11\1\125\3\11"+
    "\1\126\1\127\1\130\2\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\15\11\1\131"+
    "\6\11\1\0\1\11\3\0\1\132\1\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\12\11"+
    "\1\133\3\11\1\134\1\11\1\135\3\11\1\0\1\11"+
    "\3\0\1\11\1\136\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\137\23\11\1\0\1\11"+
    "\3\0\1\140\1\11\32\0\4\11\1\141\10\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\7\11\1\142"+
    "\14\11\1\0\1\11\3\0\1\143\1\11\32\0\2\11"+
    "\1\144\12\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\20\11\1\145\3\11\1\0\1\146\1\30\2\0"+
    "\2\11\2\0\1\147\27\0\15\11\1\0\2\11\36\30"+
    "\1\150\1\151\55\30\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\152\3\0\2\11\32\0\13\11\1\153"+
    "\1\11\1\0\2\11\46\0\1\154\126\0\1\155\111\0"+
    "\1\156\117\0\1\157\10\0\1\160\103\0\1\161\1\162"+
    "\113\0\1\163\1\0\1\164\112\0\1\165\2\0\1\166"+
    "\111\0\1\167\3\0\1\170\110\0\1\171\114\0\1\172"+
    "\114\0\1\173\5\0\1\174\1\175\105\0\1\176\37\0"+
    "\2\11\1\0\1\11\1\0\11\11\1\177\3\11\1\200"+
    "\6\11\1\0\1\11\3\0\2\11\32\0\2\11\1\201"+
    "\12\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\10\11\1\202\13\11\1\0\1\203\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\10\11\1\204\7\11\1\205\3\11\1\0\1\11\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\10\11\1\206\1\11\1\207\11\11\1\0"+
    "\1\11\3\0\2\11\32\0\1\210\14\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\10\11\1\211\13\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\12\11\1\212\11\11"+
    "\1\0\1\213\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\214\5\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\215\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\216\5\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\3\0\2\11\32\0\10\11\1\217\4\11\1\0\2\11"+
    "\67\0\1\220\113\0\1\221\26\0\1\222\1\0\1\222"+
    "\1\223\2\222\1\223\1\222\1\223\4\222\1\223\1\222"+
    "\4\223\2\222\1\224\3\223\1\222\1\223\2\222\1\223"+
    "\1\222\1\225\1\222\2\223\5\222\1\0\1\226\23\222"+
    "\15\223\1\227\1\230\1\227\45\0\1\231\52\0\2\102"+
    "\1\0\1\102\1\0\24\102\1\0\1\102\3\0\2\102"+
    "\32\0\15\102\1\0\2\102\5\0\1\232\112\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\233\3\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\3\0\1\234\1\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\3\0\2\11\32\0\2\11\1\235"+
    "\12\11\1\0\2\11\3\236\1\0\1\236\2\0\1\236"+
    "\1\0\4\237\1\0\1\237\4\0\2\237\4\0\1\237"+
    "\1\0\1\237\1\236\1\0\3\236\2\0\32\236\15\0"+
    "\1\236\1\0\1\236\7\0\1\240\1\0\4\241\1\0"+
    "\1\241\4\0\2\241\4\0\1\241\1\0\1\241\25\0"+
    "\1\240\44\0\1\242\1\0\1\243\112\0\1\244\1\0"+
    "\1\245\7\0\1\246\1\247\1\250\75\0\1\117\2\0"+
    "\6\117\3\0\1\116\2\117\1\0\1\116\2\0\3\117"+
    "\72\0\6\120\3\0\1\116\1\0\1\120\1\0\1\116"+
    "\4\0\1\120\76\0\2\121\3\0\1\116\1\0\1\121"+
    "\1\0\1\116\71\0\2\11\1\0\1\11\1\0\1\251"+
    "\23\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\252"+
    "\3\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\7\11\1\253"+
    "\14\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\3\0\2\11\32\0\1\11\1\254\13\11\1\0"+
    "\2\11\34\255\1\0\2\255\1\256\55\255\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\257\3\11\1\0\1\260"+
    "\1\130\2\0\2\11\2\0\1\261\27\0\15\11\1\0"+
    "\2\11\36\130\1\262\1\263\55\130\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\264\3\11\1\0\1\11\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\15\11\1\265\6\11\1\0\1\11\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\2\11\32\0"+
    "\7\11\1\266\5\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\17\11\1\267\4\11\1\0\1\11\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\2\11\32\0"+
    "\2\11\1\270\12\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\271\3\0\2\11\32\0"+
    "\1\272\14\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\3\0\2\11\32\0\7\11"+
    "\1\273\5\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\3\0\1\11\1\274\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\12\11\1\275\11\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\15\11\1\276\6\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\1\277\23\11\1\0\1\11\3\0\1\11\1\300\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\1\301\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\36\0\1\302\6\0\1\147\47\0\37\30"+
    "\1\151\55\30\3\0\2\11\1\0\1\11\1\0\12\11"+
    "\1\303\11\11\1\0\1\11\3\0\2\11\32\0\1\304"+
    "\14\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\3\0\2\11\32\0\7\11\1\305"+
    "\5\11\1\0\2\11\47\306\1\0\45\306\60\0\1\307"+
    "\37\0\2\11\1\0\1\11\1\0\15\11\1\310\6\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\311\5\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\3\0\1\312\1\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\2\11\32\0\1\313\14\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\10\11\1\314\13\11\1\0\1\11"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\1\11"+
    "\1\315\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\2\11\32\0"+
    "\6\11\1\316\2\11\1\317\3\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\1\11\1\320\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\1\11"+
    "\1\321\32\0\1\11\1\322\13\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\11\11\1\323\12\11\1\0"+
    "\1\324\3\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\10\11\1\325\5\11\1\326"+
    "\5\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\327\3\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\2\11\32\0\2\11\1\330\12\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\331\3\11\1\0"+
    "\1\11\3\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\16\11\1\332\1\11\1\333"+
    "\3\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\34\0\1\334\63\0\2\335\1\0\1\335\1\0"+
    "\24\335\1\334\1\335\3\0\2\335\32\0\15\335\1\0"+
    "\2\335\3\0\2\335\1\0\1\335\1\0\24\335\1\334"+
    "\1\335\3\0\1\335\1\336\32\0\15\335\1\0\2\335"+
    "\16\0\1\222\1\337\2\0\1\340\11\0\1\341\3\222"+
    "\1\0\2\222\123\0\1\342\40\0\3\342\34\0\1\334"+
    "\14\0\1\342\40\0\3\342\3\0\2\335\1\0\1\335"+
    "\1\0\24\335\1\334\1\335\3\0\2\335\6\0\1\342"+
    "\23\0\15\335\1\342\2\343\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\3\0\2\11\32\0\1\344"+
    "\14\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\15\11\1\345\6\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\6\0\1\114\1\0\1\115\6\237"+
    "\4\0\2\237\3\0\1\114\1\237\1\0\1\237\72\0"+
    "\4\241\1\0\1\241\4\0\2\241\4\0\1\241\1\0"+
    "\1\241\71\0\1\115\6\241\4\0\2\241\4\0\1\241"+
    "\1\0\1\241\73\0\1\346\116\0\1\346\112\0\1\246"+
    "\116\0\1\246\113\0\1\246\127\0\1\347\71\0\2\11"+
    "\1\0\1\11\1\0\15\11\1\350\6\11\1\0\1\11"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\351\3\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\10\11\1\352\13\11\1\0\1\11\3\0\2\11"+
    "\32\0\15\11\1\0\2\11\34\0\1\353\60\0\1\255"+
    "\1\0\15\255\1\354\2\255\1\355\11\255\1\356\3\255"+
    "\1\0\54\255\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\3\0\2\11\32\0\1\357\14\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\1\360\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\36\0\1\361\6\0\1\261\47\0\37\130\1\263\55\130"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\362\5\11"+
    "\1\0\1\11\3\0\2\11\32\0\1\363\14\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\364"+
    "\3\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\365"+
    "\3\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\1\366\23\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\12\11\1\367\11\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\3\0\1\11\1\370\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\2\11\32\0\2\11\1\371\12\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\372\3\11\1\0"+
    "\1\11\3\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\2\11\32\0\4\11\1\373\10\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\374\3\11\1\0"+
    "\1\11\3\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\12\11\1\375\11\11\1\0"+
    "\1\11\3\0\2\11\32\0\15\11\1\0\2\11\36\301"+
    "\1\376\1\377\55\301\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\u0100\3\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\16\11\1\u0101\5\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\u0102\3\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\1\306\1\0\46\306\2\0\43\306"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\3\0\1\11\1\u0103\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\2\11\32\0\3\11\1\u0104\11\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\15\11\1\u0105\6\11\1\0"+
    "\1\11\3\0\1\11\1\u0106\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\3\0\1\11\1\u0107\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\2\11\32\0\7\11\1\u0108\5\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\u0109\3\11\1\0"+
    "\1\11\3\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\2\11\32\0\1\11\1\u010a\13\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\u010b\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\u010c\3\11\1\0\1\11\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\2\11\32\0"+
    "\1\11\1\u010d\13\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\2\11\32\0"+
    "\11\11\1\u010e\3\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\1\11\1\u010f"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\u0110\23\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\3\0\2\11\32\0\2\11\1\u0111"+
    "\12\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\3\0\2\11\32\0\2\11\1\u0112"+
    "\12\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\u0113\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\335\1\0\1\335\1\0\24\335\1\0"+
    "\1\335\3\0\2\335\32\0\15\335\1\0\2\335\3\0"+
    "\2\335\1\0\1\335\1\0\24\335\1\0\1\335\3\0"+
    "\2\335\32\0\1\u0114\14\335\1\0\2\335\6\0\1\u0115"+
    "\1\0\5\u0115\1\0\1\u0115\2\0\1\u0115\1\0\2\u0115"+
    "\3\0\4\u0115\41\0\2\u0115\4\0\1\u0115\54\0\1\u0116"+
    "\105\0\1\334\14\0\1\u0117\40\0\3\u0117\3\0\2\335"+
    "\1\0\1\335\1\0\24\335\1\334\1\335\3\0\2\335"+
    "\6\0\1\u0117\23\0\15\335\1\u0117\2\u0118\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\2\11"+
    "\32\0\2\11\1\u0119\12\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\u011a\3\11\1\0\1\11"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\27\0\1\u011b"+
    "\70\0\2\11\1\0\1\11\1\0\20\11\1\u011c\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\u011d"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\2\11"+
    "\32\0\4\11\1\u011e\10\11\1\0\2\11\6\0\1\u011f"+
    "\2\0\4\u011f\1\0\1\u011f\4\0\2\u011f\4\0\3\u011f"+
    "\1\353\114\0\1\353\6\0\1\u0120\54\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\2\11\32\0"+
    "\5\11\1\u0121\7\11\1\0\2\11\36\360\1\u0122\1\u0123"+
    "\55\360\3\0\2\11\1\0\1\11\1\0\17\11\1\u0124"+
    "\4\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\1\u0125\23\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\u0126"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\10\11\1\u0127\13\11\1\0\1\11"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\2\11"+
    "\32\0\1\11\1\u0128\13\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\16\11\1\u0129\5\11\1\0\1\11"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\u012a\3\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\u012b\3\0\2\11\32\0\15\11"+
    "\1\0\2\11\37\301\1\377\55\301\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\1\11\1\u012c"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\10\11\1\u012d\13\11\1\0\1\11\3\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\u012e\3\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\3\0\1\u012f\1\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\3\0\1\11\1\u0130\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\u0131\5\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u0132\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\3\0\2\11\32\0\10\11\1\u0133\4\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\10\11\1\u0134\13\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\12\11\1\u0135\11\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\3\0\2\11\32\0\6\11\1\u0136\6\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u0137\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u0138\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\335\1\0\1\335\1\0\24\335\1\0\1\335"+
    "\3\0\1\335\1\u0139\32\0\15\335\1\0\2\335\6\0"+
    "\1\222\1\0\5\222\1\0\1\222\2\0\1\222\1\0"+
    "\2\222\3\0\4\222\41\0\2\222\4\0\1\222\17\0"+
    "\1\u013a\1\0\5\u013a\1\0\1\u013a\2\0\1\u013a\1\0"+
    "\2\u013a\3\0\4\u013a\10\0\1\222\30\0\2\u013a\4\0"+
    "\1\u013a\45\0\1\334\14\0\1\222\40\0\3\222\3\0"+
    "\2\335\1\0\1\335\1\0\24\335\1\334\1\335\3\0"+
    "\2\335\6\0\1\222\23\0\15\335\1\222\2\223\30\0"+
    "\1\246\67\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\3\0\1\11\1\u013b\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\u013c\5\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u013d\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\6\0\1\255\2\0\4\255\1\0\1\255\4\0\2\255"+
    "\4\0\3\255\67\0\1\u013e\2\0\4\u013e\1\0\1\u013e"+
    "\4\0\2\u013e\4\0\3\u013e\61\0\37\360\1\u0123\55\360"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u013f\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u0140\3\11"+
    "\1\0\1\11\3\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\1\u0141\23\11\1\0"+
    "\1\11\3\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\3\0"+
    "\1\11\1\u0142\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\2\11"+
    "\32\0\1\11\1\u0143\13\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\1\u0144"+
    "\1\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\1\u0145\1\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\u0146\23\11\1\0\1\11\3\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\3\0\2\11\32\0\1\u0147\14\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\10\11"+
    "\1\u0148\13\11\1\0\1\11\3\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\3\0\1\u0149\1\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\3\0\2\11\32\0\1\u014a\14\11\1\0\2\11"+
    "\3\0\2\335\1\0\1\335\1\0\16\335\1\u014b\5\335"+
    "\1\0\1\335\3\0\2\335\32\0\15\335\1\0\2\335"+
    "\6\0\1\u014c\1\0\5\u014c\1\0\1\u014c\2\0\1\u014c"+
    "\1\0\2\u014c\3\0\4\u014c\10\0\1\222\30\0\2\u014c"+
    "\4\0\1\u014c\14\0\2\11\1\0\1\11\1\0\10\11"+
    "\1\u014d\13\11\1\0\1\11\3\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\3\0\2\11\32\0\6\11\1\u014e\6\11"+
    "\1\0\2\11\6\0\1\u014f\2\0\4\u014f\1\0\1\u014f"+
    "\4\0\2\u014f\4\0\3\u014f\10\0\1\255\53\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\2\11"+
    "\32\0\6\11\1\u0150\6\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\3\0\2\11"+
    "\32\0\1\11\1\u0151\13\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\1\u0152\23\11\1\0\1\11\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\12\11\1\u0153\11\11\1\0\1\11\3\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\3\0\2\11\32\0"+
    "\2\11\1\u0154\12\11\1\0\2\11\3\0\2\335\1\0"+
    "\1\335\1\0\24\335\1\0\1\335\3\0\2\335\32\0"+
    "\1\335\1\u0155\13\335\1\0\2\335\6\0\1\u0156\1\0"+
    "\5\u0156\1\0\1\u0156\2\0\1\u0156\1\0\2\u0156\3\0"+
    "\4\u0156\10\0\1\222\30\0\2\u0156\4\0\1\u0156\14\0"+
    "\2\11\1\0\1\11\1\0\1\u0157\23\11\1\0\1\11"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\u0158\3\11\1\0\1\11"+
    "\3\0\2\11\32\0\15\11\1\0\2\11\6\0\1\u0159"+
    "\2\0\4\u0159\1\0\1\u0159\4\0\2\u0159\4\0\3\u0159"+
    "\10\0\1\255\53\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\3\0\1\11\1\u015a\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\u015b"+
    "\3\11\1\0\1\11\3\0\2\11\32\0\15\11\1\0"+
    "\2\11\6\0\1\u015c\1\0\5\u015c\1\0\1\u015c\2\0"+
    "\1\u015c\1\0\2\u015c\3\0\4\u015c\10\0\1\222\30\0"+
    "\2\u015c\4\0\1\u015c\17\0\1\u015d\2\0\4\u015d\1\0"+
    "\1\u015d\4\0\2\u015d\4\0\3\u015d\10\0\1\255\56\0"+
    "\1\u015e\1\0\5\u015e\1\0\1\u015e\2\0\1\u015e\1\0"+
    "\2\u015e\3\0\4\u015e\10\0\1\222\30\0\2\u015e\4\0"+
    "\1\u015e\17\0\1\u015f\2\0\4\u015f\1\0\1\u015f\4\0"+
    "\2\u015f\4\0\3\u015f\10\0\1\255\56\0\1\u0160\1\0"+
    "\5\u0160\1\0\1\u0160\2\0\1\u0160\1\0\2\u0160\3\0"+
    "\4\u0160\10\0\1\222\30\0\2\u0160\4\0\1\u0160\17\0"+
    "\1\u0161\2\0\4\u0161\1\0\1\u0161\4\0\2\u0161\4\0"+
    "\3\u0161\10\0\1\255\114\0\1\222\114\0\1\255\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19019];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\3\0\1\11\16\1\1\11\3\1\2\11"+
    "\2\1\4\11\1\1\2\11\11\1\4\11\12\1\1\11"+
    "\2\1\1\0\1\1\1\11\2\1\3\11\4\1\4\0"+
    "\7\1\1\0\20\1\1\0\1\11\4\1\13\11\1\1"+
    "\6\11\21\1\2\11\1\0\2\1\3\0\2\1\1\11"+
    "\3\1\1\11\1\1\1\0\1\1\4\0\1\11\2\0"+
    "\4\1\2\0\2\1\1\0\1\11\17\1\1\11\4\1"+
    "\1\11\24\1\1\11\2\1\2\0\1\1\1\0\3\1"+
    "\1\11\1\0\3\1\1\11\2\0\3\1\1\11\14\1"+
    "\1\11\26\1\3\0\3\1\1\0\3\1\2\0\1\1"+
    "\1\11\27\1\1\0\3\1\1\0\15\1\1\0\2\1"+
    "\1\0\6\1\1\0\2\1\1\0\2\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBufferedSequence = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBuffer;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _RustLexer() {
    this((java.io.Reader)null);
  }
  /**
    * '#+' stride demarking start/end of raw string/byte literal
    */
  private int zzShaStride = -1;

  /**
    * Dedicated storage for starting position of some previously successful
    * match
    */
  private int zzPostponedMarkedPos = -1;

  /**
    * Dedicated nested-comment level counter
    */
  private int zzNestedCommentLevel = 0;
  IElementType imbueBlockComment() {
    yybegin(YYINITIAL);

    zzStartRead           = zzPostponedMarkedPos;
    zzPostponedMarkedPos  = -1;

    if (yylength() > 2)
    {
      if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
      else if (yycharat(2) == '*')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    }

    return RustTokenElementTypes.BLOCK_COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence seq, int start, int end,int initialState){
    zzBufferedSequence = seq;
    //zzBuffer = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(seq);
    zzBuffer = com.intellij.util.text.CharArrayUtil.fromSequence(seq);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBufferedSequence.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer != null ? zzBuffer[zzStartRead+pos]:zzBufferedSequence.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;

    //CharSequence zzBufferL = zzBuffer;
    //char[] zzBufferArrayL = zzBufferArray;

    char[] zzBufferL = zzBuffer;

    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '/')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.EOL_COMMENT;
          }
        case 130: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 131: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 132: break;
        case 4: 
          { return RustTokenElementTypes.IDENTIFIER;
          }
        case 133: break;
        case 5: 
          { return RustTokenElementTypes.DOT;
          }
        case 134: break;
        case 6: 
          { return RustTokenElementTypes.MINUS;
          }
        case 135: break;
        case 7: 
          { return RustTokenElementTypes.INTEGER_LITERAL;
          }
        case 136: break;
        case 8: 
          { return RustTokenElementTypes.UNDERSCORE;
          }
        case 137: break;
        case 9: 
          { yybegin(LIFETIME_OR_CHAR); yypushback(1);
          }
        case 138: break;
        case 10: 
          { yybegin(SUFFIX); return RustTokenElementTypes.STRING_LITERAL;
          }
        case 139: break;
        case 11: 
          { return RustTokenElementTypes.LBRACE;
          }
        case 140: break;
        case 12: 
          { return RustTokenElementTypes.RBRACE;
          }
        case 141: break;
        case 13: 
          { return RustTokenElementTypes.SHA;
          }
        case 142: break;
        case 14: 
          { return RustTokenElementTypes.EXCL;
          }
        case 143: break;
        case 15: 
          { return RustTokenElementTypes.LBRACK;
          }
        case 144: break;
        case 16: 
          { return RustTokenElementTypes.RBRACK;
          }
        case 145: break;
        case 17: 
          { return RustTokenElementTypes.LPAREN;
          }
        case 146: break;
        case 18: 
          { return RustTokenElementTypes.RPAREN;
          }
        case 147: break;
        case 19: 
          { return RustTokenElementTypes.COLON;
          }
        case 148: break;
        case 20: 
          { return RustTokenElementTypes.SEMICOLON;
          }
        case 149: break;
        case 21: 
          { return RustTokenElementTypes.COMMA;
          }
        case 150: break;
        case 22: 
          { return RustTokenElementTypes.EQ;
          }
        case 151: break;
        case 23: 
          { return RustTokenElementTypes.PLUS;
          }
        case 152: break;
        case 24: 
          { return RustTokenElementTypes.OR;
          }
        case 153: break;
        case 25: 
          { return RustTokenElementTypes.AND;
          }
        case 154: break;
        case 26: 
          { return RustTokenElementTypes.LT;
          }
        case 155: break;
        case 27: 
          { return RustTokenElementTypes.XOR;
          }
        case 156: break;
        case 28: 
          { return RustTokenElementTypes.MUL;
          }
        case 157: break;
        case 29: 
          { return RustTokenElementTypes.DIV;
          }
        case 158: break;
        case 30: 
          { return RustTokenElementTypes.REM;
          }
        case 159: break;
        case 31: 
          { return RustTokenElementTypes.GT;
          }
        case 160: break;
        case 32: 
          { return RustTokenElementTypes.Q;
          }
        case 161: break;
        case 33: 
          { return RustTokenElementTypes.AT;
          }
        case 162: break;
        case 34: 
          { return RustTokenElementTypes.DOLLAR;
          }
        case 163: break;
        case 35: 
          { 
          }
        case 164: break;
        case 36: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 165: break;
        case 37: 
          { yybegin(YYINITIAL);
          }
        case 166: break;
        case 38: 
          { return RustTokenElementTypes.DOTDOT;
          }
        case 167: break;
        case 39: 
          { return RustTokenElementTypes.MINUSMINUS;
          }
        case 168: break;
        case 40: 
          { return RustTokenElementTypes.MINUSEQ;
          }
        case 169: break;
        case 41: 
          { return RustTokenElementTypes.ARROW;
          }
        case 170: break;
        case 42: 
          { return RustTokenElementTypes.FN;
          }
        case 171: break;
        case 43: 
          { yybegin(SUFFIX); return RustTokenElementTypes.BYTE_STRING_LITERAL;
          }
        case 172: break;
        case 44: 
          { return RustTokenElementTypes.IF;
          }
        case 173: break;
        case 45: 
          { return RustTokenElementTypes.IN;
          }
        case 174: break;
        case 46: 
          { return RustTokenElementTypes.SHEBANG;
          }
        case 175: break;
        case 47: 
          { return RustTokenElementTypes.EXCLEQ;
          }
        case 176: break;
        case 48: 
          { return RustTokenElementTypes.COLONCOLON;
          }
        case 177: break;
        case 49: 
          { return RustTokenElementTypes.EQEQ;
          }
        case 178: break;
        case 50: 
          { return RustTokenElementTypes.FAT_ARROW;
          }
        case 179: break;
        case 51: 
          { return RustTokenElementTypes.PLUSEQ;
          }
        case 180: break;
        case 52: 
          { return RustTokenElementTypes.PLUSPLUS;
          }
        case 181: break;
        case 53: 
          { return RustTokenElementTypes.OREQ;
          }
        case 182: break;
        case 54: 
          { return RustTokenElementTypes.OROR;
          }
        case 183: break;
        case 55: 
          { return RustTokenElementTypes.ANDEQ;
          }
        case 184: break;
        case 56: 
          { return RustTokenElementTypes.ANDAND;
          }
        case 185: break;
        case 57: 
          { return RustTokenElementTypes.LTEQ;
          }
        case 186: break;
        case 58: 
          { return RustTokenElementTypes.LTLT;
          }
        case 187: break;
        case 59: 
          { return RustTokenElementTypes.XOREQ;
          }
        case 188: break;
        case 60: 
          { return RustTokenElementTypes.MULEQ;
          }
        case 189: break;
        case 61: 
          { return RustTokenElementTypes.DIVEQ;
          }
        case 190: break;
        case 62: 
          { yybegin(BLOCK_COMMENT); yypushback(2);
          }
        case 191: break;
        case 63: 
          { yybegin(EOL_COMMENT);   yypushback(2);
          }
        case 192: break;
        case 64: 
          { return RustTokenElementTypes.REMEQ;
          }
        case 193: break;
        case 65: 
          { return RustTokenElementTypes.AS;
          }
        case 194: break;
        case 66: 
          { return RustTokenElementTypes.DO;
          }
        case 195: break;
        case 67: 
          { if (--zzNestedCommentLevel == 0)
              return imbueBlockComment();
          }
        case 196: break;
        case 68: 
          { if (zzNestedCommentLevel++ == 0)
              zzPostponedMarkedPos = zzStartRead;
          }
        case 197: break;
        case 69: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.LIFETIME;
          }
        case 198: break;
        case 70: 
          { int shaExcess = yylength() - 1 - zzShaStride;
    if (shaExcess >= 0) {
      yybegin(SUFFIX);
      yypushback(shaExcess);

      zzStartRead = zzPostponedMarkedPos;

      zzShaStride           = -1;
      zzPostponedMarkedPos  = -1;

      if (yycharat(0) == 'b')
        return RustTokenElementTypes.RAW_BYTE_STRING_LITERAL;
      else
        return RustTokenElementTypes.RAW_STRING_LITERAL;
    }
          }
        case 199: break;
        case 71: 
          { return RustTokenElementTypes.DOTDOTDOT;
          }
        case 200: break;
        case 72: 
          { return RustTokenElementTypes.FOR;
          }
        case 201: break;
        case 73: 
          // lookahead expression with fixed lookahead length
          zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 202: break;
        case 74: 
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 203: break;
        case 75: 
          { return RustTokenElementTypes.BOX;
          }
        case 204: break;
        case 76: 
          { return RustTokenElementTypes.USE;
          }
        case 205: break;
        case 77: 
          { return RustTokenElementTypes.REF;
          }
        case 206: break;
        case 78: 
          { yybegin(SUFFIX); return RustTokenElementTypes.RAW_STRING_LITERAL;
          }
        case 207: break;
        case 79: 
          { yybegin(RAW_LITERAL);

                                    zzPostponedMarkedPos = zzStartRead;
                                    zzShaStride          = yylength() - 2;
          }
        case 208: break;
        case 80: 
          { return RustTokenElementTypes.SHEBANG_LINE;
          }
        case 209: break;
        case 81: 
          { return RustTokenElementTypes.LTLTEQ;
          }
        case 210: break;
        case 82: 
          { return RustTokenElementTypes.LET;
          }
        case 211: break;
        case 83: 
          { return RustTokenElementTypes.MOD;
          }
        case 212: break;
        case 84: 
          { return RustTokenElementTypes.MUT;
          }
        case 213: break;
        case 85: 
          { return RustTokenElementTypes.PUB;
          }
        case 214: break;
        case 86: 
          { yybegin(SUFFIX);    return RustTokenElementTypes.CHAR_LITERAL;
          }
        case 215: break;
        case 87: 
          { return RustTokenElementTypes.BYTE_LITERAL;
          }
        case 216: break;
        case 88: 
          { yybegin(SUFFIX); return RustTokenElementTypes.RAW_BYTE_STRING_LITERAL;
          }
        case 217: break;
        case 89: 
          { yybegin(RAW_LITERAL);

                                    zzPostponedMarkedPos = zzStartRead;
                                    zzShaStride          = yylength() - 3;
          }
        case 218: break;
        case 90: 
          { return RustTokenElementTypes.SELF;
          }
        case 219: break;
        case 91: 
          { return RustTokenElementTypes.IMPL;
          }
        case 220: break;
        case 92: 
          { return RustTokenElementTypes.ENUM;
          }
        case 221: break;
        case 93: 
          { return RustTokenElementTypes.ELSE;
          }
        case 222: break;
        case 94: 
          { return RustTokenElementTypes.TRUE;
          }
        case 223: break;
        case 95: 
          { return RustTokenElementTypes.TYPE;
          }
        case 224: break;
        case 96: 
          { return RustTokenElementTypes.LOOP;
          }
        case 225: break;
        case 97: 
          { return RustTokenElementTypes.MOVE;
          }
        case 226: break;
        case 98: 
          { return RustTokenElementTypes.PURE;
          }
        case 227: break;
        case 99: 
          { return RustTokenElementTypes.PROC;
          }
        case 228: break;
        case 100: 
          { return RustTokenElementTypes.PRIV;
          }
        case 229: break;
        case 101: 
          { return RustTokenElementTypes.CSELF;
          }
        case 230: break;
        case 102: 
          { return RustTokenElementTypes.FINAL;
          }
        case 231: break;
        case 103: 
          { return RustTokenElementTypes.FALSE;
          }
        case 232: break;
        case 104: 
          { return RustTokenElementTypes.BREAK;
          }
        case 233: break;
        case 105: 
          { return RustTokenElementTypes.SUPER;
          }
        case 234: break;
        case 106: 
          { return RustTokenElementTypes.TRAIT;
          }
        case 235: break;
        case 107: 
          { return RustTokenElementTypes.CONST;
          }
        case 236: break;
        case 108: 
          { return RustTokenElementTypes.CRATE;
          }
        case 237: break;
        case 109: 
          { return RustTokenElementTypes.MATCH;
          }
        case 238: break;
        case 110: 
          { return RustTokenElementTypes.MACRO;
          }
        case 239: break;
        case 111: 
          { return RustTokenElementTypes.YIELD;
          }
        case 240: break;
        case 112: 
          { return RustTokenElementTypes.WHILE;
          }
        case 241: break;
        case 113: 
          { return RustTokenElementTypes.WHERE;
          }
        case 242: break;
        case 114: 
          { return RustTokenElementTypes.BECOME;
          }
        case 243: break;
        case 115: 
          { return RustTokenElementTypes.UNSAFE;
          }
        case 244: break;
        case 116: 
          { return RustTokenElementTypes.SIZEOF;
          }
        case 245: break;
        case 117: 
          { return RustTokenElementTypes.STRUCT;
          }
        case 246: break;
        case 118: 
          { return RustTokenElementTypes.STATIC;
          }
        case 247: break;
        case 119: 
          { return RustTokenElementTypes.EXTERN;
          }
        case 248: break;
        case 120: 
          { return RustTokenElementTypes.RETURN;
          }
        case 249: break;
        case 121: 
          { return RustTokenElementTypes.TYPEOF;
          }
        case 250: break;
        case 122: 
          { return RustTokenElementTypes.UNSIZED;
          }
        case 251: break;
        case 123: 
          { return RustTokenElementTypes.ALIGNOF;
          }
        case 252: break;
        case 124: 
          { return RustTokenElementTypes.VIRTUAL;
          }
        case 253: break;
        case 125: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.STATIC_LIFETIME;
          }
        case 254: break;
        case 126: 
          { return RustTokenElementTypes.OFFSETOF;
          }
        case 255: break;
        case 127: 
          { return RustTokenElementTypes.OVERRIDE;
          }
        case 256: break;
        case 128: 
          { return RustTokenElementTypes.ABSTRACT;
          }
        case 257: break;
        case 129: 
          { return RustTokenElementTypes.CONTINUE;
          }
        case 258: break;

        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;

            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              return imbueBlockComment();
            }
            case 354: break;
            case LIFETIME_OR_CHAR: {
              yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
            case 355: break;
            case RAW_LITERAL: {
              zzShaStride          = -1;
              zzPostponedMarkedPos = -1;
            }
            case 356: break;
            default:
            return null;
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
