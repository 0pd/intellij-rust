/* The following code was generated by JFlex 1.6.0 */

package org.rust.lang.core.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/org/rust/lang/core/lexer/RustLexer.flex</tt>
 */
public class _RustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int INNER_DOC_COMMENT = 4;
  public static final int OUTER_DOC_COMMENT = 6;
  public static final int EOL_COMMENT = 8;
  public static final int LIFETIME_OR_CHAR = 10;
  public static final int RAW_LITERAL = 12;
  public static final int SUFFIX = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\47\1\47\1\1\22\0\1\2\1\45\1\36"+
    "\1\44\1\73\1\67\1\62\1\34\1\52\1\53\1\65\1\60\1\56"+
    "\1\7\1\5\1\66\1\16\1\24\1\12\1\11\1\14\1\33\1\13"+
    "\1\33\1\23\1\31\1\54\1\55\1\63\1\57\1\70\1\71\1\72"+
    "\4\32\1\6\1\32\14\3\1\106\7\3\1\46\1\37\1\51\1\64"+
    "\1\15\1\0\1\74\1\21\1\75\1\102\1\30\1\10\1\77\1\104"+
    "\1\26\1\3\1\101\1\76\1\100\1\40\1\20\1\103\1\3\1\35"+
    "\1\25\1\41\1\22\1\105\1\110\1\17\1\107\1\27\1\42\1\61"+
    "\1\43\2\0\5\111\1\50\44\111\1\112\12\111\1\112\1\111\1\113"+
    "\2\111\1\112\5\111\27\112\1\111\37\112\1\111\10\112\u01c2\3\4\0"+
    "\14\3\16\0\5\3\7\0\1\3\1\0\1\3\21\0\160\4\5\3"+
    "\1\0\2\3\3\0\3\3\1\0\1\3\6\0\1\3\1\4\3\3"+
    "\1\0\1\3\1\0\24\3\1\0\123\3\1\0\213\3\1\0\5\4"+
    "\2\0\246\3\1\0\46\3\2\0\1\3\7\0\47\3\11\0\55\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4\10\0\33\3"+
    "\5\0\3\3\35\0\13\4\5\0\53\3\37\4\4\0\2\3\1\4"+
    "\143\3\1\0\1\3\7\4\2\0\6\4\2\3\2\4\1\0\4\4"+
    "\2\3\12\4\3\3\2\0\1\3\20\0\1\3\1\4\36\3\33\4"+
    "\2\0\131\3\13\4\1\3\16\0\12\4\41\3\11\4\2\3\4\0"+
    "\1\3\5\0\26\3\4\4\1\3\11\4\1\3\3\4\1\3\5\4"+
    "\22\0\31\3\3\4\104\0\23\3\61\0\40\4\66\3\3\4\1\3"+
    "\22\4\1\3\7\4\12\3\2\4\2\0\12\4\1\0\20\3\3\4"+
    "\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\1\3"+
    "\3\0\4\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0\3\4"+
    "\1\3\10\0\1\4\4\0\2\3\1\0\3\3\2\4\2\0\12\4"+
    "\2\3\17\0\3\4\1\0\6\3\4\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0"+
    "\5\4\4\0\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0"+
    "\1\3\7\0\14\4\3\3\1\4\13\0\3\4\1\0\11\3\1\0"+
    "\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0"+
    "\1\4\1\3\10\4\1\0\3\4\1\0\3\4\2\0\1\3\17\0"+
    "\2\3\2\4\2\0\12\4\21\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3"+
    "\1\0\3\3\2\4\2\0\12\4\1\0\1\3\20\0\1\4\1\3"+
    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3"+
    "\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\4"+
    "\3\0\3\4\1\0\4\4\2\0\1\3\6\0\1\4\16\0\12\4"+
    "\20\0\4\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\20\3"+
    "\3\0\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\1\0"+
    "\2\3\6\0\2\3\2\4\2\0\12\4\21\0\3\4\1\0\10\3"+
    "\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\3"+
    "\1\0\2\3\2\4\2\0\12\4\1\0\2\3\16\0\3\4\1\0"+
    "\10\3\1\0\3\3\1\0\51\3\2\0\1\3\7\4\1\0\3\4"+
    "\1\0\4\4\1\3\10\0\1\4\10\0\2\3\2\4\2\0\12\4"+
    "\12\0\6\3\2\0\2\4\1\0\22\3\3\0\30\3\1\0\11\3"+
    "\1\0\1\3\2\0\7\3\3\0\1\4\4\0\6\4\1\0\1\4"+
    "\1\0\10\4\6\0\12\4\2\0\2\4\15\0\60\3\1\4\1\3"+
    "\10\4\5\0\7\3\10\4\1\0\12\4\47\0\2\3\1\0\1\3"+
    "\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3"+
    "\1\4\1\3\7\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3"+
    "\1\0\6\4\2\0\12\4\2\0\4\3\40\0\1\3\27\0\2\4"+
    "\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\10\3\1\0\44\3\4\0\24\4\1\0\2\4\5\3\13\4\1\0"+
    "\44\4\11\0\1\4\71\0\53\3\24\4\1\3\12\4\6\0\6\3"+
    "\4\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3\4\4\15\3"+
    "\14\4\1\3\17\4\2\0\46\3\1\0\1\3\5\0\1\3\2\0"+
    "\53\3\1\0\u014d\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0"+
    "\4\3\2\0\103\3\2\0\3\4\11\0\11\4\16\0\20\3\20\0"+
    "\125\3\14\0\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\3\0"+
    "\13\3\7\0\15\3\1\0\4\3\3\4\13\0\22\3\3\4\13\0"+
    "\22\3\2\4\14\0\15\3\1\0\3\3\1\0\2\4\14\0\64\3"+
    "\40\4\3\0\1\3\4\0\1\3\1\4\2\0\12\4\41\0\3\4"+
    "\2\0\12\4\6\0\130\3\10\0\51\3\1\4\1\3\5\0\106\3"+
    "\12\0\37\3\1\0\14\4\4\0\14\4\12\0\12\4\36\3\2\0"+
    "\5\3\13\0\54\3\4\0\21\4\7\3\2\4\6\0\13\4\45\0"+
    "\27\3\5\4\4\0\65\3\12\4\1\0\35\4\2\0\13\4\6\0"+
    "\12\4\15\0\1\3\10\0\16\4\102\0\5\4\57\3\21\4\7\3"+
    "\4\0\12\4\21\0\11\4\14\0\3\4\36\3\15\4\2\3\12\4"+
    "\54\3\16\4\14\0\44\3\24\4\10\0\12\4\3\0\3\3\12\4"+
    "\44\3\122\0\3\4\1\0\25\4\4\3\1\4\4\3\3\4\2\3"+
    "\1\0\2\4\6\0\300\3\66\4\6\0\4\4\u0116\3\2\0\6\3"+
    "\2\0\46\3\2\0\6\3\2\0\10\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\37\3\2\0\65\3\1\0\7\3\1\0\1\3"+
    "\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\15\3"+
    "\5\0\3\3\1\0\7\3\53\0\1\47\1\47\25\0\2\4\23\0"+
    "\1\4\34\0\1\3\15\0\1\3\20\0\15\3\63\0\15\4\4\0"+
    "\1\4\3\0\14\4\21\0\1\3\4\0\1\3\2\0\12\3\1\0"+
    "\1\3\2\0\6\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\20\3\2\0\4\3\5\0\5\3\4\0\1\3\21\0\51\3\u0a77\0"+
    "\57\3\1\0\57\3\1\0\205\3\6\0\4\3\3\4\2\3\14\0"+
    "\46\3\1\0\1\3\5\0\1\3\2\0\70\3\7\0\1\3\17\0"+
    "\1\4\27\3\11\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\40\4"+
    "\u0205\0\3\3\31\0\11\3\6\4\1\0\5\3\2\0\5\3\4\0"+
    "\126\3\2\0\2\4\2\0\3\3\1\0\132\3\1\0\4\3\5\0"+
    "\51\3\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0"+
    "\u51cd\3\63\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0\20\3\12\4"+
    "\2\3\24\0\57\3\1\4\4\0\12\4\1\0\37\3\1\0\1\4"+
    "\120\3\2\4\45\0\11\3\2\0\147\3\2\0\4\3\1\0\36\3"+
    "\2\0\2\3\105\0\13\3\1\4\3\3\1\4\4\3\1\4\27\3"+
    "\5\4\30\0\64\3\14\0\2\4\62\3\21\4\13\0\12\4\6\0"+
    "\22\4\6\3\3\0\1\3\4\0\12\4\34\3\10\4\2\0\27\3"+
    "\15\4\14\0\35\3\3\0\4\4\57\3\16\4\16\0\1\3\12\4"+
    "\6\0\5\3\1\4\12\3\12\4\5\3\1\0\51\3\16\4\11\0"+
    "\3\3\1\4\10\3\2\4\2\0\12\4\6\0\27\3\3\0\1\3"+
    "\3\4\62\3\1\4\1\3\3\4\2\3\2\4\5\3\2\4\1\3"+
    "\1\4\1\3\30\0\3\3\2\0\13\3\5\4\2\0\3\3\2\4"+
    "\12\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3"+
    "\1\0\53\3\1\0\4\3\4\0\2\3\132\0\43\3\10\4\1\0"+
    "\2\4\2\0\12\4\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0"+
    "\u016e\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0\1\3\1\4"+
    "\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\154\3\41\0\213\3\6\0\332\3\22\0\100\3\2\0"+
    "\66\3\50\0\12\3\6\0\20\4\20\0\16\4\5\0\2\4\30\0"+
    "\3\4\41\0\1\3\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\176\3\23\0\12\4\7\0\32\3\4\0"+
    "\1\4\1\0\32\3\13\0\70\3\2\4\37\3\3\0\6\3\2\0"+
    "\6\3\2\0\6\3\2\0\3\3\43\0\14\3\1\0\32\3\1\0"+
    "\23\3\1\0\2\3\1\0\17\3\2\0\16\3\42\0\173\3\105\0"+
    "\65\3\210\0\1\4\202\0\35\3\3\0\61\3\17\0\1\4\37\0"+
    "\40\3\20\0\33\3\5\0\46\3\5\4\5\0\36\3\2\0\44\3"+
    "\4\0\10\3\1\0\5\3\52\0\236\3\2\0\12\4\126\0\50\3"+
    "\10\0\64\3\234\0\u0137\3\11\0\26\3\12\0\10\3\230\0\6\3"+
    "\2\0\1\3\1\0\54\3\1\0\2\3\3\0\1\3\2\0\27\3"+
    "\12\0\27\3\11\0\37\3\141\0\26\3\12\0\32\3\106\0\70\3"+
    "\6\0\2\3\100\0\1\3\3\4\1\0\2\4\5\0\4\4\4\3"+
    "\1\0\3\3\1\0\33\3\4\0\3\4\4\0\1\4\40\0\35\3"+
    "\3\0\35\3\43\0\10\3\1\0\34\3\2\4\31\0\66\3\12\0"+
    "\26\3\12\0\23\3\15\0\22\3\156\0\111\3\u03b7\0\3\4\65\3"+
    "\17\4\37\0\12\4\17\0\4\4\55\3\13\4\25\0\31\3\7\0"+
    "\12\4\6\0\3\4\44\3\16\4\1\0\12\4\20\0\43\3\1\4"+
    "\2\0\1\3\11\0\3\4\60\3\16\4\4\3\13\0\12\4\1\3"+
    "\45\0\22\3\1\0\31\3\14\4\170\0\57\3\14\4\5\0\12\4"+
    "\7\0\3\4\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3"+
    "\1\0\2\3\1\0\5\3\2\0\1\4\1\3\7\4\2\0\2\4"+
    "\2\0\3\4\11\0\1\4\5\0\5\3\2\4\2\0\7\4\3\0"+
    "\5\4\u010b\0\60\3\24\4\2\3\1\0\1\3\10\0\12\4\246\0"+
    "\57\3\7\4\2\0\11\4\77\0\60\3\21\4\3\0\1\3\13\0"+
    "\12\4\46\0\53\3\15\4\10\0\12\4\u01d6\0\100\3\12\4\25\0"+
    "\1\3\u01c0\0\71\3\u0507\0\u0399\3\147\0\157\3\u0b91\0\u042f\3\u33d1\0"+
    "\u0239\3\7\0\37\3\1\0\12\4\146\0\36\3\2\0\5\4\13\0"+
    "\60\3\7\4\11\0\4\3\14\0\12\4\11\0\25\3\5\0\23\3"+
    "\u0370\0\105\3\13\0\1\3\56\4\20\0\4\4\15\3\u4060\0\2\3"+
    "\u0bfe\0\153\3\5\0\15\3\3\0\11\3\7\0\12\3\3\0\2\4"+
    "\u14c6\0\5\4\3\0\6\4\10\0\10\4\2\0\7\4\36\0\4\4"+
    "\224\0\3\4\u01bb\0\125\3\1\0\107\3\1\0\2\3\2\0\1\3"+
    "\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3"+
    "\1\0\101\3\1\0\4\3\2\0\10\3\1\0\7\3\1\0\34\3"+
    "\1\0\4\3\1\0\5\3\1\0\1\3\3\0\7\3\1\0\u0154\3"+
    "\2\0\31\3\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3"+
    "\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3\1\0\31\3"+
    "\1\0\10\3\2\0\62\4\u1000\0\305\3\13\0\7\4\u0529\0\4\3"+
    "\1\0\33\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3"+
    "\1\0\4\3\1\0\1\3\1\0\12\3\1\0\21\3\5\0\3\3"+
    "\1\0\5\3\1\0\21\3\u1144\0\ua6d7\3\51\0\u1035\3\13\0\336\3"+
    "\u3fe2\0\u021e\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\4\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\4\1\7\1\10\1\7\6\4\1\11\1\4\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\12\4\3\43\1\0\2\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\2\4\1\53\1\4\4\0\3\7"+
    "\5\4\1\54\6\4\1\55\1\56\6\4\1\0\2\12"+
    "\2\4\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\4\1\102\10\4\1\103"+
    "\6\4\1\104\1\105\1\0\2\106\3\0\1\106\1\107"+
    "\1\110\1\111\2\4\1\112\1\113\1\0\1\113\4\0"+
    "\1\7\2\0\2\4\1\114\3\4\1\0\2\54\1\115"+
    "\12\4\1\116\1\4\1\117\1\120\3\4\1\121\1\122"+
    "\5\4\1\123\1\124\1\4\1\125\2\4\1\126\10\4"+
    "\1\127\2\106\2\0\1\127\1\0\1\106\2\4\1\113"+
    "\1\0\4\4\1\130\1\131\4\4\1\132\2\4\1\133"+
    "\1\4\1\134\1\135\1\4\2\117\1\136\1\4\1\137"+
    "\5\4\1\140\1\141\2\4\1\142\1\143\1\144\1\4"+
    "\1\145\3\4\1\106\3\0\1\106\1\146\1\147\1\0"+
    "\3\4\1\150\2\130\2\4\1\151\5\4\1\152\3\4"+
    "\1\153\1\4\1\154\1\155\1\156\1\4\1\157\1\160"+
    "\1\161\1\106\1\0\2\4\1\162\1\4\1\163\1\164"+
    "\1\165\1\166\1\167\1\170\1\171\4\4\1\106\1\0"+
    "\2\4\1\172\1\4\1\173\1\4\1\174\1\175\1\0"+
    "\1\176\1\177\1\200\1\201\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u0260\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u01c8\0\u05f0\0\u063c"+
    "\0\u0688\0\u01c8\0\u01c8\0\u06d4\0\u0720\0\u01c8\0\u01c8\0\u01c8"+
    "\0\u01c8\0\u076c\0\u01c8\0\u01c8\0\u07b8\0\u0804\0\u0850\0\u089c"+
    "\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u01c8\0\u01c8\0\u01c8"+
    "\0\u01c8\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c"+
    "\0\u0c78\0\u0cc4\0\u0d10\0\u01c8\0\u0d5c\0\u0da8\0\u0df4\0\u01c8"+
    "\0\u0e40\0\u01c8\0\u0e8c\0\u0ed8\0\u01c8\0\u01c8\0\u01c8\0\u0f24"+
    "\0\u0f70\0\u0260\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138"+
    "\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398"+
    "\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u0260\0\u0260"+
    "\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u01c8"+
    "\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u01c8\0\u01c8\0\u01c8\0\u01c8"+
    "\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u18f0"+
    "\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u193c\0\u0260"+
    "\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c"+
    "\0\u0260\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u01c8"+
    "\0\u01c8\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78"+
    "\0\u0e40\0\u01c8\0\u0260\0\u1fc4\0\u2010\0\u01c8\0\u205c\0\u20a8"+
    "\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u01c8\0\u2270\0\u22bc"+
    "\0\u2308\0\u2354\0\u0260\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u01c8"+
    "\0\u24d0\0\u0260\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698"+
    "\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u0260\0\u2814\0\u2860\0\u01c8"+
    "\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u01c8\0\u29dc\0\u2a28\0\u2a74"+
    "\0\u2ac0\0\u2b0c\0\u0260\0\u0260\0\u2b58\0\u0260\0\u2ba4\0\u2bf0"+
    "\0\u0260\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04"+
    "\0\u2e50\0\u01c8\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u1db0\0\u2fcc"+
    "\0\u3018\0\u3064\0\u30b0\0\u01c8\0\u30fc\0\u3148\0\u3194\0\u31e0"+
    "\0\u322c\0\u3278\0\u01c8\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u0260"+
    "\0\u33f4\0\u3440\0\u0260\0\u348c\0\u0260\0\u0260\0\u34d8\0\u01c8"+
    "\0\u3524\0\u0260\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec"+
    "\0\u3738\0\u0260\0\u0260\0\u3784\0\u37d0\0\u0260\0\u0260\0\u0260"+
    "\0\u381c\0\u0260\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4"+
    "\0\u3a30\0\u3a7c\0\u0260\0\u0260\0\u3ac8\0\u3b14\0\u3b60\0\u3bac"+
    "\0\u0260\0\u01c8\0\u3bf8\0\u3c44\0\u3c90\0\u0260\0\u3cdc\0\u3d28"+
    "\0\u3d74\0\u3dc0\0\u3e0c\0\u0260\0\u3e58\0\u3ea4\0\u3ef0\0\u0260"+
    "\0\u3f3c\0\u0260\0\u0260\0\u0260\0\u3f88\0\u0260\0\u0260\0\u0260"+
    "\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u0260\0\u4104\0\u0260\0\u0260"+
    "\0\u0260\0\u0260\0\u0260\0\u0260\0\u0260\0\u4150\0\u419c\0\u41e8"+
    "\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u0260\0\u43b0\0\u0260"+
    "\0\u43fc\0\u0260\0\u2e9c\0\u4448\0\u0260\0\u0260\0\u0260\0\u0260"+
    "\0\u4494\0\u44e0\0\u452c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\7\1\12\1\11\1\13\1\14"+
    "\4\15\1\16\1\17\1\11\1\20\1\21\1\22\2\15"+
    "\1\23\1\24\1\11\1\25\1\15\1\11\1\15\1\26"+
    "\1\27\1\30\1\7\1\11\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\2\7\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\11\1\65\1\11\1\66\1\67\1\11\1\70"+
    "\1\71\1\72\1\73\1\7\1\11\1\7\65\74\1\75"+
    "\1\76\25\74\1\3\1\0\45\3\2\0\43\3\34\0"+
    "\1\77\57\0\36\100\1\101\55\100\3\102\1\103\2\102"+
    "\1\103\1\102\1\103\4\102\1\103\1\102\4\103\2\102"+
    "\4\103\1\102\1\103\2\102\1\103\2\102\2\103\32\102"+
    "\15\103\1\102\1\103\1\102\115\0\2\10\114\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\5\0\1\104\115\0\1\105"+
    "\47\0\1\106\10\0\1\107\26\0\2\11\1\0\1\11"+
    "\1\0\10\11\1\110\5\11\1\111\5\11\1\0\1\11"+
    "\2\0\1\112\1\11\32\0\1\113\14\11\1\0\2\11"+
    "\5\0\1\114\1\115\1\0\1\116\6\15\3\0\1\117"+
    "\2\15\1\0\1\117\1\0\1\115\1\15\1\0\1\15"+
    "\65\0\1\114\1\115\1\0\1\116\6\15\1\120\1\121"+
    "\1\122\1\117\2\15\1\0\1\117\1\0\1\115\1\15"+
    "\1\0\1\15\63\0\2\11\1\0\1\11\1\0\1\123"+
    "\23\11\1\0\1\11\2\0\2\11\32\0\11\11\1\124"+
    "\3\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\10\11\1\125\7\11\1\126\3\11\1\0\1\127\1\130"+
    "\1\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\15\11\1\131\6\11\1\0\1\11"+
    "\2\0\1\132\1\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\12\11\1\133\3\11\1\134"+
    "\1\11\1\135\3\11\1\0\1\11\2\0\1\11\1\136"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\137\23\11\1\0\1\11\2\0\1\140\1\11"+
    "\32\0\4\11\1\141\10\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\7\11\1\142\14\11\1\0\1\11"+
    "\2\0\1\143\1\11\32\0\2\11\1\144\12\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\145"+
    "\3\11\1\0\1\146\1\30\1\0\2\11\2\0\1\147"+
    "\27\0\15\11\1\0\2\11\36\30\1\150\1\151\54\30"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\152"+
    "\2\0\2\11\32\0\13\11\1\153\1\11\1\0\2\11"+
    "\45\0\1\154\125\0\1\155\110\0\1\156\116\0\1\157"+
    "\10\0\1\160\102\0\1\161\1\162\112\0\1\163\1\0"+
    "\1\164\111\0\1\165\2\0\1\166\110\0\1\167\3\0"+
    "\1\170\107\0\1\171\113\0\1\172\113\0\1\173\5\0"+
    "\1\174\1\175\104\0\1\176\37\0\2\11\1\0\1\11"+
    "\1\0\11\11\1\177\3\11\1\200\6\11\1\0\1\11"+
    "\2\0\2\11\32\0\2\11\1\201\12\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\10\11\1\202\13\11"+
    "\1\0\1\203\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\10\11\1\204\7\11"+
    "\1\205\3\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\10\11"+
    "\1\206\1\11\1\207\11\11\1\0\1\11\2\0\2\11"+
    "\32\0\1\210\14\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\10\11\1\211\13\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\12\11\1\212\11\11\1\0\1\213\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\16\11\1\214\5\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\215\3\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\16\11\1\216\5\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\10\11\1\217\4\11\1\0\2\11\66\0\1\220\112\0"+
    "\1\221\26\0\1\222\1\0\1\222\1\223\2\222\1\223"+
    "\1\222\1\223\4\222\1\223\1\222\4\223\2\222\1\224"+
    "\3\223\1\222\1\223\2\222\1\223\1\222\1\225\2\223"+
    "\5\222\1\0\1\226\23\222\15\223\1\227\1\230\1\227"+
    "\44\0\1\231\52\0\2\103\1\0\1\103\1\0\24\103"+
    "\1\0\1\103\2\0\2\103\32\0\15\103\1\0\2\103"+
    "\5\0\1\232\111\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\233\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\2\0\1\234\1\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\2\0"+
    "\2\11\32\0\2\11\1\235\12\11\1\0\2\11\3\236"+
    "\1\0\1\236\2\0\1\236\1\0\4\237\1\0\1\237"+
    "\4\0\2\237\4\0\1\237\1\0\1\237\1\236\1\0"+
    "\2\236\2\0\32\236\15\0\1\236\1\0\1\236\7\0"+
    "\1\240\1\0\4\241\1\0\1\241\4\0\2\241\4\0"+
    "\1\241\1\0\1\241\24\0\1\240\44\0\1\242\1\0"+
    "\1\243\111\0\1\244\1\0\1\245\7\0\1\246\1\247"+
    "\1\250\74\0\1\120\2\0\6\120\3\0\1\117\2\120"+
    "\1\0\1\117\2\0\3\120\71\0\6\121\3\0\1\117"+
    "\1\0\1\121\1\0\1\117\4\0\1\121\75\0\2\122"+
    "\3\0\1\117\1\0\1\122\1\0\1\117\70\0\2\11"+
    "\1\0\1\11\1\0\1\251\23\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\252\3\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\7\11\1\253\14\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\1\11\1\254\13\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\255\3\11\1\0\1\256\1\130"+
    "\1\0\2\11\2\0\1\257\27\0\15\11\1\0\2\11"+
    "\36\130\1\260\1\261\54\130\3\0\2\11\1\0\1\11"+
    "\1\0\20\11\1\262\3\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\15\11\1\263\6\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\2\11\32\0\7\11"+
    "\1\264\5\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\17\11\1\265\4\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\2\11\32\0\2\11"+
    "\1\266\12\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\267\2\0\2\11\32\0\1\270"+
    "\14\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\2\0\2\11\32\0\7\11\1\271"+
    "\5\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\11\2\0\1\11\1\272\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\12\11"+
    "\1\273\11\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\15\11"+
    "\1\274\6\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\1\275"+
    "\23\11\1\0\1\11\2\0\1\11\1\276\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\1\277\1\0\2\11\32\0\15\11\1\0"+
    "\2\11\36\0\1\300\5\0\1\147\47\0\37\30\1\151"+
    "\54\30\3\0\2\11\1\0\1\11\1\0\12\11\1\301"+
    "\11\11\1\0\1\11\2\0\2\11\32\0\1\302\14\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\2\0\2\11\32\0\7\11\1\303\5\11"+
    "\1\0\2\11\46\304\1\0\45\304\57\0\1\305\37\0"+
    "\2\11\1\0\1\11\1\0\15\11\1\306\6\11\1\0"+
    "\1\11\2\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\16\11\1\307\5\11\1\0"+
    "\1\11\2\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\2\0"+
    "\1\310\1\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\1\311\14\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\10\11\1\312\13\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\1\11\1\313"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\2\11\32\0\6\11"+
    "\1\314\2\11\1\315\3\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\1\11"+
    "\1\316\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\1\11\1\317"+
    "\32\0\1\11\1\320\13\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\11\11\1\321\12\11\1\0\1\322"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\10\11\1\323\5\11\1\324\5\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\325"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\2\11\1\326\12\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\327\3\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\16\11\1\330\1\11\1\331\3\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\34\0\1\332\62\0\2\333\1\0\1\333\1\0\24\333"+
    "\1\332\1\333\2\0\2\333\32\0\15\333\1\0\2\333"+
    "\3\0\2\333\1\0\1\333\1\0\24\333\1\332\1\333"+
    "\2\0\1\333\1\334\32\0\15\333\1\0\2\333\16\0"+
    "\1\222\1\335\2\0\1\336\11\0\1\337\5\222\122\0"+
    "\1\340\40\0\3\340\34\0\1\332\13\0\1\340\40\0"+
    "\3\340\3\0\2\333\1\0\1\333\1\0\24\333\1\332"+
    "\1\333\2\0\2\333\6\0\1\340\23\0\15\333\1\340"+
    "\2\341\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\2\0\2\11\32\0\1\342\14\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\15\11\1\343\6\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\6\0\1\115\1\0\1\116\6\237\4\0\2\237\3\0"+
    "\1\115\1\237\1\0\1\237\71\0\4\241\1\0\1\241"+
    "\4\0\2\241\4\0\1\241\1\0\1\241\70\0\1\116"+
    "\6\241\4\0\2\241\4\0\1\241\1\0\1\241\72\0"+
    "\1\344\115\0\1\344\111\0\1\246\115\0\1\246\112\0"+
    "\1\246\126\0\1\345\70\0\2\11\1\0\1\11\1\0"+
    "\15\11\1\346\6\11\1\0\1\11\2\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\1\0\1\347\2\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\10\11\1\350"+
    "\13\11\1\0\1\11\2\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\2\0\2\11\32\0\1\351\14\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\1\352\1\0\2\11\32\0\15\11\1\0\2\11\36\0"+
    "\1\353\5\0\1\257\47\0\37\130\1\261\54\130\3\0"+
    "\2\11\1\0\1\11\1\0\16\11\1\354\5\11\1\0"+
    "\1\11\2\0\2\11\32\0\1\355\14\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\356\3\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\357\3\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\1\360\23\11\1\0"+
    "\1\11\2\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\12\11\1\361\11\11\1\0"+
    "\1\11\2\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\2\0"+
    "\1\11\1\362\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\2\11\1\363\12\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\364\3\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\4\11\1\365\10\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\366\3\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\12\11\1\367\11\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\36\277\1\370"+
    "\1\371\54\277\3\0\2\11\1\0\1\11\1\0\20\11"+
    "\1\372\3\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\16\11"+
    "\1\373\5\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\20\11"+
    "\1\374\3\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\1\304\1\0\45\304\2\0\43\304\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\2\0"+
    "\1\11\1\375\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\3\11\1\376\11\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\15\11\1\377\6\11\1\0\1\11"+
    "\2\0\1\11\1\u0100\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\11\2\0"+
    "\1\11\1\u0101\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\7\11\1\u0102\5\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\u0103\3\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\1\11\1\u0104\13\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\u0105\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\20\11\1\u0106\3\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\2\11\32\0\1\11"+
    "\1\u0107\13\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\2\11\32\0\11\11"+
    "\1\u0108\3\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\1\11\1\u0109\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\1\u010a\23\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\2\0\2\11\32\0\2\11\1\u010b\12\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\2\0\2\11\32\0\2\11\1\u010c\12\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\u010d\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\333\1\0\1\333\1\0\24\333\1\0\1\333"+
    "\2\0\2\333\32\0\15\333\1\0\2\333\3\0\2\333"+
    "\1\0\1\333\1\0\24\333\1\0\1\333\2\0\2\333"+
    "\32\0\1\u010e\14\333\1\0\2\333\6\0\1\u010f\1\0"+
    "\5\u010f\1\0\1\u010f\2\0\1\u010f\1\0\2\u010f\3\0"+
    "\4\u010f\40\0\2\u010f\4\0\1\u010f\53\0\1\u0110\105\0"+
    "\1\332\13\0\1\u0111\40\0\3\u0111\3\0\2\333\1\0"+
    "\1\333\1\0\24\333\1\332\1\333\2\0\2\333\6\0"+
    "\1\u0111\23\0\15\333\1\u0111\2\u0112\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\2\11\1\u0113\12\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\u0114\3\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\27\0\1\u0115\67\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\u0116\3\11\1\0"+
    "\1\11\2\0\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\1\0\1\u0117\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\4\11\1\u0118\10\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\5\11\1\u0119\7\11\1\0\2\11\36\352\1\u011a\1\u011b"+
    "\54\352\3\0\2\11\1\0\1\11\1\0\17\11\1\u011c"+
    "\4\11\1\0\1\11\2\0\2\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\1\u011d\23\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\u011e"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\10\11\1\u011f\13\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\1\11\1\u0120\13\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\16\11\1\u0121\5\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\u0122\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\u0123\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\37\277\1\371\54\277\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\1\11\1\u0124"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\10\11\1\u0125\13\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\u0126\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\2\0\1\u0127\1\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\2\0\1\11\1\u0128\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\u0129\5\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u012a\3\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\2\0\2\11\32\0\10\11\1\u012b\4\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\10\11\1\u012c\13\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\12\11\1\u012d\11\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\2\0\2\11\32\0\6\11\1\u012e\6\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u012f\3\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u0130\3\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\333\1\0\1\333\1\0\24\333\1\0\1\333"+
    "\2\0\1\333\1\u0131\32\0\15\333\1\0\2\333\6\0"+
    "\1\222\1\0\5\222\1\0\1\222\2\0\1\222\1\0"+
    "\2\222\3\0\4\222\40\0\2\222\4\0\1\222\17\0"+
    "\1\u0132\1\0\5\u0132\1\0\1\u0132\2\0\1\u0132\1\0"+
    "\2\u0132\3\0\4\u0132\7\0\1\222\30\0\2\u0132\4\0"+
    "\1\u0132\45\0\1\332\13\0\1\222\40\0\3\222\3\0"+
    "\2\333\1\0\1\333\1\0\24\333\1\332\1\333\2\0"+
    "\2\333\6\0\1\222\23\0\15\333\1\222\2\223\30\0"+
    "\1\246\66\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\2\0\1\11\1\u0133\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\u0134\5\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\u0135\3\11"+
    "\1\0\1\11\2\0\2\11\32\0\15\11\1\0\2\11"+
    "\37\352\1\u011b\54\352\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\u0136\3\11\1\0\1\11\2\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\u0137\3\11\1\0\1\11\2\0\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\1\u0138\23\11\1\0\1\11\2\0\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\1\0\1\11\2\0\1\11\1\u0139\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\2\0\2\11\32\0\1\11\1\u013a\13\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\1\0"+
    "\1\11\2\0\1\u013b\1\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\1\0\1\11"+
    "\2\0\1\u013c\1\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\u013d\23\11\1\0\1\11"+
    "\2\0\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\1\0\1\11\2\0\2\11"+
    "\32\0\1\u013e\14\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\10\11\1\u013f\13\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\1\u0140\1\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\2\11\32\0\1\u0141"+
    "\14\11\1\0\2\11\3\0\2\333\1\0\1\333\1\0"+
    "\16\333\1\u0142\5\333\1\0\1\333\2\0\2\333\32\0"+
    "\15\333\1\0\2\333\6\0\1\u0143\1\0\5\u0143\1\0"+
    "\1\u0143\2\0\1\u0143\1\0\2\u0143\3\0\4\u0143\7\0"+
    "\1\222\30\0\2\u0143\4\0\1\u0143\14\0\2\11\1\0"+
    "\1\11\1\0\10\11\1\u0144\13\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\6\11\1\u0145\6\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\6\11\1\u0146\6\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\2\11\32\0"+
    "\1\11\1\u0147\13\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\1\u0148\23\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\12\11\1\u0149\11\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\1\0\1\11\2\0\2\11\32\0\2\11"+
    "\1\u014a\12\11\1\0\2\11\3\0\2\333\1\0\1\333"+
    "\1\0\24\333\1\0\1\333\2\0\2\333\32\0\1\333"+
    "\1\u014b\13\333\1\0\2\333\6\0\1\u014c\1\0\5\u014c"+
    "\1\0\1\u014c\2\0\1\u014c\1\0\2\u014c\3\0\4\u014c"+
    "\7\0\1\222\30\0\2\u014c\4\0\1\u014c\14\0\2\11"+
    "\1\0\1\11\1\0\1\u014d\23\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\u014e\3\11\1\0\1\11\2\0"+
    "\2\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\1\0\1\11\2\0\1\11\1\u014f"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\20\11\1\u0150\3\11\1\0\1\11\2\0\2\11"+
    "\32\0\15\11\1\0\2\11\6\0\1\u0151\1\0\5\u0151"+
    "\1\0\1\u0151\2\0\1\u0151\1\0\2\u0151\3\0\4\u0151"+
    "\7\0\1\222\30\0\2\u0151\4\0\1\u0151\17\0\1\u0152"+
    "\1\0\5\u0152\1\0\1\u0152\2\0\1\u0152\1\0\2\u0152"+
    "\3\0\4\u0152\7\0\1\222\30\0\2\u0152\4\0\1\u0152"+
    "\17\0\1\u0153\1\0\5\u0153\1\0\1\u0153\2\0\1\u0153"+
    "\1\0\2\u0153\3\0\4\u0153\7\0\1\222\30\0\2\u0153"+
    "\4\0\1\u0153\54\0\1\222\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\3\0\1\11\16\1\1\11\3\1\2\11"+
    "\2\1\4\11\1\1\2\11\11\1\4\11\12\1\1\11"+
    "\2\1\1\0\1\11\1\1\1\11\2\1\3\11\4\1"+
    "\4\0\27\1\1\0\1\11\4\1\13\11\1\1\6\11"+
    "\21\1\2\11\1\0\2\1\3\0\2\1\1\11\3\1"+
    "\1\11\1\1\1\0\1\1\4\0\1\11\2\0\6\1"+
    "\1\0\1\11\17\1\1\11\4\1\1\11\24\1\1\11"+
    "\2\1\2\0\1\1\1\0\3\1\1\11\1\0\5\1"+
    "\1\11\14\1\1\11\26\1\3\0\3\1\1\0\4\1"+
    "\1\11\27\1\1\0\20\1\1\0\10\1\1\0\4\1"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBufferedSequence = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBuffer;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _RustLexer() {
    this((java.io.Reader)null);
  }

  /**
    * '#+' stride demarking start/end of raw string/byte literal
    */
  private int zzShaStride = -1;

  /**
    * Starting position of raw string/byte literal
    */
  private int zzRawLiteralStart = -1;

  /**
    * Raw literal type (byte/string)
    */
  private IElementType zzRawLiteralType = null;

  private int commentDepth;
  private int commentStart;

  private IElementType endComment() {
      zzStartRead = commentStart;
      int state = yystate();
      yybegin(YYINITIAL);
      switch (state) {
          case BLOCK_COMMENT:
              return RustTokenElementTypes.BLOCK_COMMENT;
          case INNER_DOC_COMMENT:
              return RustTokenElementTypes.INNER_DOC_COMMENT;
          case OUTER_DOC_COMMENT:
              return RustTokenElementTypes.OUTER_DOC_COMMENT;
          default:
              throw new IllegalArgumentException("Unexpected state: " + state);
      }
  }

  private void beginComment(int state) {
      yybegin(state);
      commentDepth = 0;
      commentStart = getTokenStart();
  }


  /**
    * '#+' stride demarking start/end of raw string/byte literal
    */
  private int zzShaStride = -1;

  /**
    * Starting position of raw string/byte literal
    */
  private int zzRawLiteralStart = -1;

  /**
    * Raw literal type (byte/string)
    */
  private IElementType zzRawLiteralType = null;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence seq, int start, int end,int initialState){
    zzBufferedSequence = seq;
    //zzBuffer = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(seq);
    zzBuffer = com.intellij.util.text.CharArrayUtil.fromSequence(seq);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBufferedSequence.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer != null ? zzBuffer[zzStartRead+pos]:zzBufferedSequence.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;

    //CharSequence zzBufferL = zzBuffer;
    //char[] zzBufferArrayL = zzBufferArray;

    char[] zzBufferL = zzBuffer;

    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '/')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.EOL_COMMENT;
          }
        case 130: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 131: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 132: break;
        case 4: 
          { return RustTokenElementTypes.IDENTIFIER;
          }
        case 133: break;
        case 5: 
          { return RustTokenElementTypes.DOT;
          }
        case 134: break;
        case 6: 
          { return RustTokenElementTypes.MINUS;
          }
        case 135: break;
        case 7: 
          { return RustTokenElementTypes.INTEGER_LITERAL;
          }
        case 136: break;
        case 8: 
          { return RustTokenElementTypes.UNDERSCORE;
          }
        case 137: break;
        case 9: 
          { yybegin(LIFETIME_OR_CHAR); yypushback(1);
          }
        case 138: break;
        case 10: 
          { yybegin(SUFFIX); return RustTokenElementTypes.STRING_LITERAL;
          }
        case 139: break;
        case 11: 
          { return RustTokenElementTypes.LBRACE;
          }
        case 140: break;
        case 12: 
          { return RustTokenElementTypes.RBRACE;
          }
        case 141: break;
        case 13: 
          { return RustTokenElementTypes.SHA;
          }
        case 142: break;
        case 14: 
          { return RustTokenElementTypes.EXCL;
          }
        case 143: break;
        case 15: 
          { return RustTokenElementTypes.LBRACK;
          }
        case 144: break;
        case 16: 
          { return RustTokenElementTypes.RBRACK;
          }
        case 145: break;
        case 17: 
          { return RustTokenElementTypes.LPAREN;
          }
        case 146: break;
        case 18: 
          { return RustTokenElementTypes.RPAREN;
          }
        case 147: break;
        case 19: 
          { return RustTokenElementTypes.COLON;
          }
        case 148: break;
        case 20: 
          { return RustTokenElementTypes.SEMICOLON;
          }
        case 149: break;
        case 21: 
          { return RustTokenElementTypes.COMMA;
          }
        case 150: break;
        case 22: 
          { return RustTokenElementTypes.EQ;
          }
        case 151: break;
        case 23: 
          { return RustTokenElementTypes.PLUS;
          }
        case 152: break;
        case 24: 
          { return RustTokenElementTypes.OR;
          }
        case 153: break;
        case 25: 
          { return RustTokenElementTypes.AND;
          }
        case 154: break;
        case 26: 
          { return RustTokenElementTypes.LT;
          }
        case 155: break;
        case 27: 
          { return RustTokenElementTypes.XOR;
          }
        case 156: break;
        case 28: 
          { return RustTokenElementTypes.MUL;
          }
        case 157: break;
        case 29: 
          { return RustTokenElementTypes.DIV;
          }
        case 158: break;
        case 30: 
          { return RustTokenElementTypes.REM;
          }
        case 159: break;
        case 31: 
          { return RustTokenElementTypes.GT;
          }
        case 160: break;
        case 32: 
          { return RustTokenElementTypes.Q;
          }
        case 161: break;
        case 33: 
          { return RustTokenElementTypes.AT;
          }
        case 162: break;
        case 34: 
          { return RustTokenElementTypes.DOLLAR;
          }
        case 163: break;
        case 35: 
          { /* do nothing */
          }
        case 164: break;
        case 36: 
          { 
          }
        case 165: break;
        case 37: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 166: break;
        case 38: 
          { yybegin(YYINITIAL);
          }
        case 167: break;
        case 39: 
          { return RustTokenElementTypes.DOTDOT;
          }
        case 168: break;
        case 40: 
          { return RustTokenElementTypes.MINUSMINUS;
          }
        case 169: break;
        case 41: 
          { return RustTokenElementTypes.MINUSEQ;
          }
        case 170: break;
        case 42: 
          { return RustTokenElementTypes.ARROW;
          }
        case 171: break;
        case 43: 
          { return RustTokenElementTypes.FN;
          }
        case 172: break;
        case 44: 
          { yybegin(SUFFIX); return RustTokenElementTypes.BYTE_LITERAL;
          }
        case 173: break;
        case 45: 
          { return RustTokenElementTypes.IF;
          }
        case 174: break;
        case 46: 
          { return RustTokenElementTypes.IN;
          }
        case 175: break;
        case 47: 
          { return RustTokenElementTypes.SHEBANG;
          }
        case 176: break;
        case 48: 
          { return RustTokenElementTypes.EXCLEQ;
          }
        case 177: break;
        case 49: 
          { return RustTokenElementTypes.COLONCOLON;
          }
        case 178: break;
        case 50: 
          { return RustTokenElementTypes.EQEQ;
          }
        case 179: break;
        case 51: 
          { return RustTokenElementTypes.FAT_ARROW;
          }
        case 180: break;
        case 52: 
          { return RustTokenElementTypes.PLUSEQ;
          }
        case 181: break;
        case 53: 
          { return RustTokenElementTypes.PLUSPLUS;
          }
        case 182: break;
        case 54: 
          { return RustTokenElementTypes.OREQ;
          }
        case 183: break;
        case 55: 
          { return RustTokenElementTypes.OROR;
          }
        case 184: break;
        case 56: 
          { return RustTokenElementTypes.ANDEQ;
          }
        case 185: break;
        case 57: 
          { return RustTokenElementTypes.ANDAND;
          }
        case 186: break;
        case 58: 
          { return RustTokenElementTypes.LTEQ;
          }
        case 187: break;
        case 59: 
          { return RustTokenElementTypes.LTLT;
          }
        case 188: break;
        case 60: 
          { return RustTokenElementTypes.XOREQ;
          }
        case 189: break;
        case 61: 
          { return RustTokenElementTypes.MULEQ;
          }
        case 190: break;
        case 62: 
          { return RustTokenElementTypes.DIVEQ;
          }
        case 191: break;
        case 63: 
          { yybegin(BLOCK_COMMENT); yypushback(2);
          }
        case 192: break;
        case 64: 
          { yybegin(EOL_COMMENT);   yypushback(2);
          }
        case 193: break;
        case 65: 
          { return RustTokenElementTypes.REMEQ;
          }
        case 194: break;
        case 66: 
          { return RustTokenElementTypes.AS;
          }
        case 195: break;
        case 67: 
          { return RustTokenElementTypes.DO;
          }
        case 196: break;
        case 68: 
          { if (commentDepth > 0) {
          commentDepth--;
      } else {
          return endComment();
      }
          }
        case 197: break;
        case 69: 
          { commentDepth++;
          }
        case 198: break;
        case 70: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.LIFETIME;
          }
        case 199: break;
        case 71: 
          { if (zzShaStride == yylength() - 1) {
      yybegin(SUFFIX);

      zzStartRead = zzRawLiteralStart;

      zzShaStride       = -1;
      zzRawLiteralStart = -1;

      return zzRawLiteralType;
    }
          }
        case 200: break;
        case 72: 
          { return RustTokenElementTypes.DOTDOTDOT;
          }
        case 201: break;
        case 73: 
          { return RustTokenElementTypes.FOR;
          }
        case 202: break;
        case 74: 
          // lookahead expression with fixed lookahead length
          zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 203: break;
        case 75: 
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 204: break;
        case 76: 
          { return RustTokenElementTypes.BOX;
          }
        case 205: break;
        case 77: 
          { return RustTokenElementTypes.USE;
          }
        case 206: break;
        case 78: 
          { return RustTokenElementTypes.REF;
          }
        case 207: break;
        case 79: 
          { yybegin(SUFFIX); return RustTokenElementTypes.RAW_STRING_LITERAL;
          }
        case 208: break;
        case 80: 
          { yybegin(RAW_LITERAL);

                                    zzRawLiteralStart = zzStartRead;
                                    zzRawLiteralType  = RustTokenElementTypes.RAW_STRING_LITERAL;
                                    zzShaStride       = yylength() - 2;
          }
        case 209: break;
        case 81: 
          { return RustTokenElementTypes.SHEBANG_LINE;
          }
        case 210: break;
        case 82: 
          { return RustTokenElementTypes.LTLTEQ;
          }
        case 211: break;
        case 83: 
          { return RustTokenElementTypes.LET;
          }
        case 212: break;
        case 84: 
          { return RustTokenElementTypes.MOD;
          }
        case 213: break;
        case 85: 
          { return RustTokenElementTypes.MUT;
          }
        case 214: break;
        case 86: 
          { return RustTokenElementTypes.PUB;
          }
        case 215: break;
        case 87: 
          { yybegin(SUFFIX);    return RustTokenElementTypes.CHAR_LITERAL;
          }
        case 216: break;
        case 88: 
          { yybegin(SUFFIX); return RustTokenElementTypes.RAW_BYTE_LITERAL;
          }
        case 217: break;
        case 89: 
          { yybegin(RAW_LITERAL);
                                    zzRawLiteralStart = zzStartRead;
                                    zzRawLiteralType  = RustTokenElementTypes.RAW_BYTE_LITERAL;
                                    zzShaStride       = yylength() - 3;
          }
        case 218: break;
        case 90: 
          { return RustTokenElementTypes.SELF;
          }
        case 219: break;
        case 91: 
          { return RustTokenElementTypes.IMPL;
          }
        case 220: break;
        case 92: 
          { return RustTokenElementTypes.ENUM;
          }
        case 221: break;
        case 93: 
          { return RustTokenElementTypes.ELSE;
          }
        case 222: break;
        case 94: 
          { return RustTokenElementTypes.TRUE;
          }
        case 223: break;
        case 95: 
          { return RustTokenElementTypes.TYPE;
          }
        case 224: break;
        case 96: 
          { return RustTokenElementTypes.LOOP;
          }
        case 225: break;
        case 97: 
          { return RustTokenElementTypes.MOVE;
          }
        case 226: break;
        case 98: 
          { return RustTokenElementTypes.PURE;
          }
        case 227: break;
        case 99: 
          { return RustTokenElementTypes.PROC;
          }
        case 228: break;
        case 100: 
          { return RustTokenElementTypes.PRIV;
          }
        case 229: break;
        case 101: 
          { return RustTokenElementTypes.CSELF;
          }
        case 230: break;
        case 102: 
          { return RustTokenElementTypes.FINAL;
          }
        case 231: break;
        case 103: 
          { return RustTokenElementTypes.FALSE;
          }
        case 232: break;
        case 104: 
          { return RustTokenElementTypes.BREAK;
          }
        case 233: break;
        case 105: 
          { return RustTokenElementTypes.SUPER;
          }
        case 234: break;
        case 106: 
          { return RustTokenElementTypes.TRAIT;
          }
        case 235: break;
        case 107: 
          { return RustTokenElementTypes.CONST;
          }
        case 236: break;
        case 108: 
          { return RustTokenElementTypes.CRATE;
          }
        case 237: break;
        case 109: 
          { return RustTokenElementTypes.MATCH;
          }
        case 238: break;
        case 110: 
          { return RustTokenElementTypes.MACRO;
          }
        case 239: break;
        case 111: 
          { return RustTokenElementTypes.YIELD;
          }
        case 240: break;
        case 112: 
          { return RustTokenElementTypes.WHILE;
          }
        case 241: break;
        case 113: 
          { return RustTokenElementTypes.WHERE;
          }
        case 242: break;
        case 114: 
          { return RustTokenElementTypes.BECOME;
          }
        case 243: break;
        case 115: 
          { return RustTokenElementTypes.UNSAFE;
          }
        case 244: break;
        case 116: 
          { return RustTokenElementTypes.SIZEOF;
          }
        case 245: break;
        case 117: 
          { return RustTokenElementTypes.STRUCT;
          }
        case 246: break;
        case 118: 
          { return RustTokenElementTypes.STATIC;
          }
        case 247: break;
        case 119: 
          { return RustTokenElementTypes.EXTERN;
          }
        case 248: break;
        case 120: 
          { return RustTokenElementTypes.RETURN;
          }
        case 249: break;
        case 121: 
          { return RustTokenElementTypes.TYPEOF;
          }
        case 250: break;
        case 122: 
          { return RustTokenElementTypes.UNSIZED;
          }
        case 251: break;
        case 123: 
          { return RustTokenElementTypes.ALIGNOF;
          }
        case 252: break;
        case 124: 
          { return RustTokenElementTypes.VIRTUAL;
          }
        case 253: break;
        case 125: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.STATIC_LIFETIME;
          }
        case 254: break;
        case 126: 
          { return RustTokenElementTypes.OFFSETOF;
          }
        case 255: break;
        case 127: 
          { return RustTokenElementTypes.OVERRIDE;
          }
        case 256: break;
        case 128: 
          { return RustTokenElementTypes.ABSTRACT;
          }
        case 257: break;
        case 129: 
          { return RustTokenElementTypes.CONTINUE;
          }
        case 258: break;

        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;

            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              return endComment();
            }
            case 340: break;
            case INNER_DOC_COMMENT: {
              return endComment();
            }
            case 341: break;
            case OUTER_DOC_COMMENT: {
              return endComment();
            }
            case 342: break;
            case LIFETIME_OR_CHAR: {
              yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
            case 343: break;
            case RAW_LITERAL: {
              zzShaStride       = -1;
              zzRawLiteralStart = -1;
            }
            case 344: break;
            default:
            return null;
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
